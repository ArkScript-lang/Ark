($ suffix-dup (sym x) {
    ($if (> x 1)
        (suffix-dup sym (- x 1)))
    (symcat sym x)})

($ partial (func ...defargs) {
    ($ bloc (suffix-dup a (- (argcount func) (len defargs))))
    (fun (bloc) (func ...defargs bloc))
    ($undef bloc)})

(let test_func (fun (a b c) (* a b c)))
(let test_func1 (partial test_func 1))

(print "Generated partial functions for test_func (a b c) => (* a b c)")
(print "Expected arguments for test_func:  " (argcount test_func) ", expected " 3)
(print "Expected arguments for test_func1: " (argcount test_func1) ", expected " 2)
(print "Calling them: " (test_func 1 2 3) " " (test_func1 2 3))

($ foo (a b) (+ a b))
(print "Using macro foo (a b) => (+ a b): " (foo 1 2))

($ var 12)
(print "Using macro constant var=12: " var)

($if (= var 12)
    (print "This was executed in a if macro, testing var == 12")
    (print "You shouldn't see this"))

($if (and true true)
    (print "This was executed in a if macro, testing (and true true)")
    (print "You shouldn't see this (bis)"))

($ defun (name args body) (let name (fun args body)))
(defun a_func (a b) (+ a b))
(print "Generated a function with a macro, a_func (a b) => (+ a b)")
(print "Calling (a_func 1 2): " (a_func 1 2))

($ one (...args) (print "Macro 'one', returns the 2nd argument given in " args " => " (@ args 1)))
(one 1 2)
(one 1 3 4)
(one 1 5 6 7 8)

($ last (...args) (print "Macro 'last', returns the last argument given in " args " => " (@ args -1)))
(last 1 2)
(last 1 3 4)
(last 1 5 6 7 8)

{
    (print "Testing macros in scopes and macro shadowing")

    ($ test (+ 1 2 3))
    (print "(global) Reading macro 'test', expected 6, " test)

    ((fun () {
        ($ test (- 1 2 3))
        (print "(sub scope) Reading macro 'test', expected -4, " test)}))

    (print "(global) Reading macro 'test', expected 6, " test)

    {
        ($ test 555)
        (print "(subscope) Reading macro 'test', expected 555, " test)
        ($ undef test)
        (print "(subscope, undef test) Reading macro 'test', expected 6, " test)
        ($ undef a)}}

(print "Demonstrating a threading macro")

($ -> (arg fn1 ...fn) {
    ($if (> (len fn) 0)
        (-> (fn1 arg) ...fn)
        (fn1 arg))})

(let filename "hello.json")

(let f1 (fun (data) {
    (print ">>f1 " data)
    (+ data "-f1")}))

(let f2 (fun (data) {
    (print ">>f2 " data)
    (+ data "-f2")}))

(let f3 (fun (data) {
    (print ">>f3 " data)
    (+ data "-f3")}))

(let f4 (fun (data) {
    (print ">>f4 " data)
    (+ data "-f4")}))

(print "We expected calls to go like this: f1, f2, f3, f4")
(print (-> filename f1 f2 f3 f4))  # (f4 (f3 (f2 (f1 filename))))