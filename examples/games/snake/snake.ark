{
    (import "sfml.bin")
    (import "Exceptions.ark")
    (import "Switch.ark")

    (sfWindowInit 600 600 "ArkSnake")
    (sfWindowSetFPS 60)

    # stuff needed for the texts
    (let font (sfLoadFont "FreeSansBold.ttf"))
    (let fps_text (sfMakeText font "FPS: NaN" 18 [255 255 255]))
    (sfSetPos fps_text (/ (- 600 (sfWidth fps_text)) 2) 580)

    # the board object
    # 0 => empty, 1 => apple
    (let create-board-object (fun () {
        # sprites used for the game
        (let apple_sprite (sfLoadSprite "apple.png"))

        (mut data [])
        {
            (mut _y 0)

            (while (!= _y 20) {
                (mut _x 0)
                (mut line [])

                (while (!= _x 20) {
                    (mut t 0)  # empty
                    (if (or (and (= _y 10) (= _x 5)) (or (and (= _y 5) (= _x 2)) (and (= _y 12) (= _x 12))))
                        (set t 1)
                        (set t 0)
                    )
                    (set line (append line t))
                    (set _x (+ 1 _x))
                })

                (set data (append data line))
                (set _y (+ 1 _y))
            })
        }

        (let draw_board (fun () {
            (mut y 0)
            (while (!= y 20) {
                (mut x 0)
                (while (!= x 20) {
                    (mut case (@ (@ data y) x))
                    (if (= case 1)
                        # then
                        {
                            (sfSetPos apple_sprite (* 20 x) (* 20 y))
                            (sfDraw apple_sprite)
                        }
                        # else
                        ()
                    )
                    (set x (+ x 1))
                })
                (set y (+ 1 y))
            })

            # ret
            nil
        }))

        (let has_apple_left? (fun () {
            (mut apple_left 0)
            (mut y 0)
            (while (!= y 20) {
                (mut x 0)
                (while (!= x 20) {
                    (mut case (@ (@ data y) x))
                    (if (= case 1)
                        # then
                        (set apple_left (+ 1 apple_left))
                        # else
                        ()
                    )
                    (set x (+ x 1))
                })
                (set y (+ 1 y))
            })

            # ret
            apple_left
        }))

        (let eat_apple_at (fun (x y)
            (if (and (and (>= x 0) (>= y 0)) (and (< y 20) (< x 20)))
                {
                    (let test (= 1 (@ (@ data y) x)))
                    (if test
                        # remove apple
                        {
                            (mut _y 0)
                            (mut _data [])

                            (while (!= _y 20) {
                                (mut _x 0)
                                (mut line [])

                                (if (= _y y)
                                    # then
                                    (while (!= _x 20) {
                                        (mut case (@ (@ data _y) _x))
                                        (if (= _x x) (set case 0) ())
                                        (set line (append line case))
                                        (set _x (+ 1 _x))
                                    })
                                    # else
                                    (set line (@ data _y))
                                )

                                (set _data (append _data line))
                                (set _y (+ 1 _y))
                            })

                            (set data _data)
                        }
                        ()
                    )
                    (return test)
                }
                (throw "Out of bounds")
            )
        ))

        (fun (&data &apple_sprite &draw_board &has_apple_left? &eat_apple_at) ())
    }))

    # instanciating
    (let board (create-board-object))

    # the snake
    (let create-snake-object (fun () {
        (mut pos [[0 0]])
        (mut should_move true)
        (mut last_direction [1 0])  # right
        (let snake_sprite (sfLoadSprite "snake.png"))

        (let move (fun (mx my board) {
            # we don't need to move since this function was called explicitly
            (set should_move false)
            (set last_direction [mx my])

            (let p (@ pos (- (len pos) 1)))

            (try (board.eat_apple_at (+ mx (@ p 0)) (+ my (@ p 1)))
                (fun (result) {
                    # if result == false, move the tail to the head
                    # otherwise, add a new head
                    (set pos (append pos [(+ mx (@ p 0)) (+ my (@ p 1))]))
                    (if result
                        # then
                        ()
                        # else
                        (if (!= 0 (len pos))
                            # then
                            (set pos (tailOf pos))
                            # else
                            ()
                        )
                    )
                })
                (fun (err) ())
            )
        }))

        (let reset_auto_move (fun () (set should_move true)))

        (let auto_move (fun (board) {
            (move (@ last_direction 0) (@ last_direction 1) board)
        }))

        (let draw (fun () {
            (mut acc 0)
            (while (!= acc (len pos)) {
                (mut current (@ pos acc))
                (sfSetPos snake_sprite (* 20 (@ current 0)) (* 20 (@ current 1)))
                (sfDraw snake_sprite)
                (set acc (+ 1 acc))
            })
        }))

        (fun (&move &reset_auto_move &auto_move &draw &pos &should_move &last_direction &snake_sprite) ())
    }))

    # instanciating
    (let snake (create-snake-object))

    (while (sfWindowIsOpen) {
        (mut frame_start (time))

        # event handling
        (snake.reset_auto_move)

        (mut event (sfPollEvent))

        (switch event [
            [(sfEvent "quit") '(sfWindowClose)]
            [(sfEvent "keyup" "up") '(snake.move 0 -1 board)]
            [(sfEvent "keyup" "down") '(snake.move 0 1 board)]
            [(sfEvent "keyup" "right") '(snake.move 1 0 board)]
            [(sfEvent "keyup" "left") '(snake.move -1 0 board)]
        ])

        # update
        (if (= 0 (board.has_apple_left?))
            {
                (print "victoire royale !")
                (sfWindowClose)
            }
            ()
        )
        # (snake.auto_move board)

        # rendering
        (sfWindowClear 0 0 0)
        (board.draw_board)      # draw board first
        (snake.draw)            # then snake
        (sfDraw fps_text)
        (sfWindowDisplay)     # double buffering

        (mut diff (- (time) frame_start))
        (if (!= diff 0)
            (sfSetText fps_text (+ "FPS: " (toString (/ 1 diff))))
            (sfSetText fps_text "FPS: NaN")
        )
    })
}
