(import "List.ark")

(let filter (fun (lst cond) {
    (mut output [])
    (mut i 0)
    (while (< i (len lst)) {
        (if (cond (@ lst i))
            (append! output (@ lst i)))
        (set i (+ 1 i))
    })
    output
}))

# a quicksort function in ArkScript, a lot smaller than its C++ version!
# and according to me, a lot simpler to understand
(let quicksort (fun (array) {
    (if (empty? array)
        # if the given list is empty, return it
        []
        # otherwise, sort it
        {
            # the pivot will be the first element
            (let pivot (head array))
            # call quicksort on a smaller array containing all the elements less than the pivot
            (mut less (quicksort (filter (tail array) (fun (e) (< e pivot)))))
            # and after that, call quicksort on a smaller array containing all the elements greater or equal to the pivot
            (let more (quicksort (filter (tail array) (fun (e) (>= e pivot)))))

            (concat! less [pivot] more)
            # return a concatenation of arrays
            less
        })
}))

# an unsorted list to sort
(let a [3 6 1 5 1 65 324 765 1 6 3 0 6 9 6 5 3 2 5 6 7 64 645 7 345 432 432 4 324 23])

# a benchmarking function, to see the difference between C++ sort and ArkScript quicksort
# obviously ArkScript will be a bit slower
(let bench (fun (name code) {
    (mut start (time))
    (let rep 1000)

    (mut i 0)
    (while (< i rep) {
        (code)
        (set i (+ 1 i))
    })

    (let t (/ (* 1000 (- (time) start)) rep))
    (print name " average: " t "ms")
    t
}))

(print a)
# use a quoted argument to defer evaluation and be able to call it multiple times in a fresh context
(let ark (bench "ark" '(quicksort a)))
(let cpp (bench "cpp" '(list:sort a)))
(print "ratio ark/cpp: " (/ ark cpp))
