/**
 * @file IROptimizer.hpp
 * @author Alexandre Plateau (lexplt.dev@gmail.com)
 * @brief Optimize IR based on IR entity grouped by 2 (or more)
 * @version 0.2
 * @date 2024-10-11
 *
 * @copyright Copyright (c) 2024
 *
 */
#ifndef ARK_COMPILER_INTERMEDIATEREPRESENTATION_IROPTIMIZER_HPP
#define ARK_COMPILER_INTERMEDIATEREPRESENTATION_IROPTIMIZER_HPP

#include <Ark/Platform.hpp>
#include <Ark/Logger.hpp>
#include <Ark/Compiler/ValTableElem.hpp>
#include <Ark/Compiler/IntermediateRepresentation/Entity.hpp>

#include <optional>

namespace Ark::internal
{
    class ARK_API IROptimizer final
    {
    public:
        /**
         * @brief Create a new IROptimizer
         *
         * @param debug debug level
         */
        explicit IROptimizer(unsigned debug);

        /**
         * @brief Turn a given IR into bytecode
         *
         * @param pages list of lists of IR entities generated by the compiler
         * @param symbols symbol table generated by the compiler
         * @param values value table generated by the compiler
         */
        void process(const std::vector<IR::Block>& pages, const std::vector<std::string>& symbols, const std::vector<ValTableElem>& values);

        /**
         * @brief Return the IR blocks (one per scope)
         *
         * @return const std::vector<Block>&
         */
        [[nodiscard]] const std::vector<IR::Block>& intermediateRepresentation() const noexcept;

    private:
        Logger m_logger;
        std::vector<IR::Block> m_ir;
        std::vector<std::string> m_symbols;
        std::vector<ValTableElem> m_values;

        [[nodiscard]] std::optional<IR::Entity> compactEntities(const IR::Entity& first, const IR::Entity& second);
        [[nodiscard]] std::optional<IR::Entity> compactEntities(const IR::Entity& first, const IR::Entity& second, const IR::Entity& third);

        [[nodiscard]] bool isNumber(uint16_t id, double expected_number) const;
    };
}

#endif  // ARK_COMPILER_INTERMEDIATEREPRESENTATION_IROPTIMIZER_HPP
