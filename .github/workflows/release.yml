name: "Create a release"

on:
  push:
    tags:
      - '*'

env:
  BUILD_TYPE: Release
  SQLITE_VERSION: 3390100  # 3.39.1

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.name }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            os: ubuntu-latest, name: "Ubuntu Clang 15",
            compiler: clang, compiler_version: 15,
            artifact: "ubuntu-clang-15"
          }
          - {
            os: ubuntu-latest, name: "Ubuntu GCC 13",
            compiler: gcc, compiler_version: 13,
            artifact: "ubuntu-gcc-13"
          }
          - {
            os: windows-latest, name: "Windows VS 2022",
            compiler: msvc, compiler_version: "",
            artifact: "windows-msvc-22"
          }
          - {
            os: macos-latest, name: "MacOS Clang 15",
            artifact: "macos-clang-15",
            compiler: clang, compiler_version: 15,
          }

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup compilers, dependencies, project and build
        uses: ./.github/workflows/setup-compilers
        with:
          os_name: ${{ matrix.config.os }}
          compiler: ${{ matrix.config.compiler }}
          compiler_version: ${{ matrix.config.compiler_version }}
          sanitizers: 'Off'
          with_deps: true

      - name: Organize files for upload
        if: startsWith(matrix.config.name, 'Ubuntu') || startsWith(matrix.config.name, 'MacOS')
        shell: bash
        run: |
          mkdir -p artifact/lib/std
          cp build/arkscript artifact
          cp build/libArkReactor.* artifact
          cp lib/*.arkm artifact/lib
          cp lib/std/*.ark artifact/lib/std
          rm -rf artifact/lib/std/{.git,.github,tests/__arkscript__}

      - name: Organize files for upload
        if: startsWith(matrix.config.name, 'Windows')
        shell: bash
        run: |
          mkdir -p artifact/lib/std
          cp build/$BUILD_TYPE/arkscript.exe artifact
          cp build/$BUILD_TYPE/ArkReactor.dll artifact
          cp lib/*.arkm artifact/lib
          cp lib/std/*.ark artifact/lib/std
          rm -rf artifact/lib/std/{.git,.github,tests/__arkscript__}

      - name: Generate InnoSetup installer
        if: startsWith(matrix.config.name, 'Windows')
        uses: SuperFola/is-build-action@master
        with:
          path-to-script: 'Installer.iss'
          artifact-name: 'arkscript.exe'

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.config.artifact }}
          path: artifact
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs: [ build ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Download artifact Linux GCC 13
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-gcc-13
          path: ark-ubuntu-gcc-13

      - name: Download artifact Linux Clang 15
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-clang-15
          path: ark-ubuntu-clang-15

      - name: Download artifact Windows MSVC 19
        uses: actions/download-artifact@v3
        with:
          name: windows-msvc-22
          path: ark-windows-msvc-22

      - name: Download artifact MacOS Clang
        uses: actions/download-artifact@v3
        with:
          name: macos-clang-15
          path: ark-macos-clang-15

      - name: Download artifact Windows InnoSetup installer
        uses: actions/download-artifact@v3
        with:
          name: arkscript.exe
          path: ark-windows-installer

      - name: Make ZIPs
        shell: bash
        run: |
          for i in ark-*; do
            name=`echo $i | cut -c 5-`
            (cd ${i} && zip -r ../${name}.zip ./)
          done

      - name: Extract release notes
        id: extract-release-notes
        uses: ffurrer2/extract-release-notes@v1

      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ArkScript ${{ env.RELEASE_VERSION }}
          draft: true
          prerelease: false
          body: ${{ steps.extract-release-notes.outputs.release_notes }}

      - uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "A new release (${{ env.RELEASE_VERSION }}) has been drafted"
          description: |
            Please review it **before publishing it**, as this action would trigger workflows and GitHub webhooks,
            notifying everyone of a new release! You want to be sure **everything** is correct
            [Release draft URL](${{ steps.create_release.outputs.html_url }})
          nodetail: true
          username: GitHub Actions

      - name: Upload artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ubuntu-gcc-13.zip
          asset_name: linux-gcc-13.zip
          asset_content_type: application/zip

      - name: Upload artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ubuntu-clang-15.zip
          asset_name: linux-clang-15.zip
          asset_content_type: application/zip

      - name: Upload artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows-msvc-22.zip
          asset_name: windows-msvc-22.zip
          asset_content_type: application/zip

      - name: Upload artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ark-windows-installer/arkscript.exe
          asset_name: windows-installer.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos-clang-15.zip
          asset_name: macos-clang-15.zip
          asset_content_type: application/zip
