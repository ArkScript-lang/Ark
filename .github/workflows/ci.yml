name: "Building and testing ArkScript"

on:
  push:
    branches: [dev, master]
    paths-ignore:
      - '.github/workflows/docker.yml'
      - '.github/workflows/label.yml'
      - '.github/workflows/lizard.yml'
      - '.github/workflows/release.yml'
      - '.vscode/*.*'
      - 'examples/*.ark'
      - 'images/*.*'
      - '*.md'
      - 'docs/*.*'
      - 'Dockerfile'
      - '.dockerignore'
      - 'LICENCE'
      - '.gitignore'
  pull_request:
    branches: [dev]

env:
  BUILD_TYPE: Debug
  SQLITE_VERSION: 3390100  # 3.39.1

jobs:
  check:
    name: Formatting check
    runs-on: ubuntu-latest

    strategy:
      matrix:
        path:
          - 'src'
          - 'include'

    steps:
      - uses: actions/checkout@v3

      - name: Run clang-format check for C++
        uses: HorstBaerbel/action-clang-format@master
        with:
          scandir: ${{ matrix.path }}
          style: 'file'

  repo_visualizer:
    runs-on: ubuntu-latest
    needs: []

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Update diagram
      uses: githubocto/repo-visualizer@main
      with:
        excluded_paths: 'dist,node_modules,submodules'
        should_push: false
        output_file: 'diagram.svg'
        artifact_name: 'diagram'

  build:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.name }}
    needs: [check]

    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            os: ubuntu-latest, name: "Ubuntu Clang 11", cc: "clang-11", cxx: "clang++-11",
            artifact: "ubuntu-clang-11", preconfigure: "", sanitizers: "On"
          }
          - {
            os: ubuntu-latest, name: "Ubuntu Clang 11 (valgrind)", cc: "clang-11", cxx: "clang++-11",
            artifact: "ubuntu-clang-11-valgrind", preconfigure: "", sanitizers: "Off"
          }
          - {
            os: ubuntu-latest, name: "Ubuntu Clang 10", cc: "clang-10", cxx: "clang++-10",
            artifact: "ubuntu-clang-10", preconfigure: "", sanitizers: "On"
          }
          - {
            os: ubuntu-latest, name: "Ubuntu Clang 9", cc: "clang-9", cxx: "clang++-9",
            artifact: "ubuntu-clang-9", preconfigure: "", sanitizers: "On"
          }
          - {
            os: ubuntu-latest, name: "Ubuntu GCC 11", cc: "gcc-11", cxx: "g++-11",
            artifact: "ubuntu-gcc-11", preconfigure: "", sanitizers: "Off"
          }
          - {
            os: ubuntu-latest, name: "Ubuntu GCC 10", cc: "gcc-10", cxx: "g++-10",
            artifact: "ubuntu-gcc-10", preconfigure: "", sanitizers: "Off"
          }
          - {
            os: ubuntu-latest, name: "Ubuntu GCC 9", cc: "gcc-9", cxx: "g++-9",
            artifact: "ubuntu-gcc-9", preconfigure: "", sanitizers: "Off"
          }
          - {
            os: ubuntu-latest, name: "Ubuntu GCC 8", cc: "gcc-8", cxx: "g++-8",
            artifact: "ubuntu-gcc-8", preconfigure: "", sanitizers: "Off"
          }
          - {
            os: windows-latest, name: "Windows VS 2019", cc: "cl", cxx: "cl",
            artifact: "windows-msvc-19",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            preconfigure: "", sanitizers: "On"
          }
          - {
            os: windows-latest, name: "Windows VS 2017", cc: "cl", cxx: "cl",
            artifact: "windows-msvc-17",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            preconfigure: "", sanitizers: "On"
          }
          - {
            os: macos-latest, name: "MacOS Clang 12", cc: "clang", cxx: "clang++",
            artifact: "macos-clang-12",
            preconfigure: "export OPENSSL_ROOT_DIR=/usr/local/opt/openssl/",
            sanitizers: "On"
          }

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Update GNU compilers
      if: startsWith(matrix.config.name, 'Ubuntu') && startsWith(matrix.config.cc, 'gcc')
      shell: bash
      run: |
        sudo apt-add-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt-get -yq install ${{ matrix.config.cc }} ${{ matrix.config.cxx }}

    - name: Update LLVM compilers
      if: startsWith(matrix.config.name, 'Ubuntu') && startsWith(matrix.config.cc, 'clang')
      shell: bash
      run: |
        version=`echo ${{ matrix.config.cc }} | cut -c 7-`
        sudo apt-get install -y clang-${version} lld-${version} libc++-${version}-dev libc++abi-${version}-dev clang-tools-${version}

    - name: Install MacOS dependencies
      if: startsWith(matrix.config.name, 'MacOS')
      shell: bash
      run: env HOMEBREW_NO_AUTO_UPDATE=1 brew install openssl

    - uses: ilammy/msvc-dev-cmd@v1
      if: startsWith(matrix.config.name, 'Windows')

    - name: Download Windows dependencies
      if: startsWith(matrix.config.name, 'Windows')
      shell: pwsh
      run: |
        Invoke-RestMethod -Uri https://www.sqlite.org/2022/sqlite-dll-win64-x64-${Env:SQLITE_VERSION}.zip -OutFile sqlite.zip
        Invoke-RestMethod -Uri https://www.sqlite.org/2022/sqlite-amalgamation-${Env:SQLITE_VERSION}.zip  -OutFile amalgation.zip
        Expand-Archive sqlite.zip -DestinationPath sqlite_lib
        Expand-Archive amalgation.zip -DestinationPath sqlite_code
        cd sqlite_lib
        lib /DEF:sqlite3.def /OUT:sqlite3.lib /MACHINE:x64

    - name: Configure CMake Ark
      shell: bash
      run: |
        ${{ matrix.config.preconfigure }}
        cmake -Bbuild \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
          -DARK_SANITIZERS=${{ matrix.config.sanitizers }} \
          -DARK_BUILD_EXE=On -DARK_BUILD_MODULES=On -DARK_MOD_ALL=On

    - name: Add SQLite deps
      if: startsWith(matrix.config.name, 'Windows')
      shell: bash
      run: |
        cmake -Bbuild \
          -DSQLite3_INCLUDE_DIR=$(pwd)/sqlite_code/sqlite-amalgamation-${SQLITE_VERSION} \
          -DSQLite3_LIBRARY=$(pwd)/sqlite_lib/sqlite3.lib

    - name: Build ArkScript
      shell: bash
      run: cmake --build build --config $BUILD_TYPE

    - name: Configure CMake Integration tests
      shell: bash
      run: |
        cd tests/cpp
        cmake -Bbuild \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
          -DARK_SANITIZERS=${{ matrix.config.sanitizers }}

    - name: Build Integration tests
      shell: bash
      run: cd tests/cpp && cmake --build build --config $BUILD_TYPE

    - name: Organize files for upload
      if: startsWith(matrix.config.name, 'Ubuntu') || startsWith(matrix.config.name, 'MacOS')
      shell: bash
      run: |
        mkdir -p artifact/lib/std
        cp build/ark artifact
        cp build/arkscript artifact
        cp build/libArkReactor.* artifact
        cp lib/*.arkm artifact/lib
        cp lib/std/*.ark artifact/lib/std
        rm -rf artifact/lib/std/{.git,.github,tests/__arkscript__}

    - name: Organize files for upload
      if: startsWith(matrix.config.name, 'Windows')
      shell: bash
      run: |
        mkdir -p artifact/lib/std
        cp build/$BUILD_TYPE/ark.exe artifact
        cp build/$BUILD_TYPE/arkscript.exe artifact
        cp build/$BUILD_TYPE/ArkReactor.dll artifact
        cp lib/*.arkm artifact/lib
        cp lib/std/*.ark artifact/lib/std
        rm -rf artifact/lib/std/{.git,.github,tests/__arkscript__}

    - name: Organize temp artifact
      shell: bash
      run: |
        mkdir -p temp/
        cp -r tests/cpp temp/

    - name: Upload artifact
      uses: actions/upload-artifact@v3.1.1
      with:
        name: ${{ matrix.config.artifact }}
        path: artifact

    - name: Upload temp artifact
      uses: actions/upload-artifact@v3.1.1
      with:
        name: temp-${{ matrix.config.artifact }}
        path: temp
        retention-days: 1

  tests:
    runs-on: ${{ matrix.config.os }}
    name: Test on ${{ matrix.config.name }}
    needs: [build]

    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu-latest,  name: "Ubuntu Clang 11", artifact: "ubuntu-clang-11" }
          - { os: ubuntu-latest,  name: "Ubuntu Clang 10", artifact: "ubuntu-clang-10" }
          - { os: ubuntu-latest,  name: "Ubuntu Clang 9",  artifact: "ubuntu-clang-9" }
          - { os: ubuntu-latest,  name: "Ubuntu GCC 11",   artifact: "ubuntu-gcc-11" }
          - { os: ubuntu-latest,  name: "Ubuntu GCC 10",   artifact: "ubuntu-gcc-10" }
          - { os: ubuntu-latest,  name: "Ubuntu GCC 9",    artifact: "ubuntu-gcc-9" }
          - { os: ubuntu-latest,  name: "Ubuntu GCC 8",    artifact: "ubuntu-gcc-8" }
          - { os: windows-latest, name: "Windows VS 2019", artifact: "windows-msvc-19", }
          - { os: windows-latest, name: "Windows VS 2017", artifact: "windows-msvc-17", }
          - { os: macos-latest,   name: "MacOS Clang 12",  artifact: "macos-clang-12", }

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Download artifact
      id: download
      uses: actions/download-artifact@v3.0.1
      with:
        name: ${{ matrix.config.artifact }}
        path: build

    - name: Download temp artifact
      id: download-artifact
      uses: actions/download-artifact@v3.0.1
      with:
        name: temp-${{ matrix.config.artifact }}
        path: artifact

    - name: Update GNU compilers
      if: startsWith(matrix.config.name, 'Ubuntu GCC')
      shell: bash
      run: |
        sudo apt-add-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt-get -yq install libstdc++6

    - shell: bash
      run: |
        mv artifact/cpp/out tests/cpp/
        mv build/lib/*.arkm lib/
        chmod u+x build/ark build/arkscript tests/cpp/out/*

    - name: Pre-test
      if: startsWith(matrix.config.name, 'Windows')
      shell: bash
      run: |
        mkdir -p tests/cpp/out
        cp build/*.dll tests/cpp/out/

    - name: Tests
      if: steps.download.outcome == 'success' && steps.download-artifact.outcome == 'success'
      shell: bash
      run: |
        export ASAN_OPTIONS=use_odr_indicator=1
        bash .github/launch-tests

  valgrind:
    runs-on: ubuntu-latest
    name: Ubuntu Clang 11 Valgrind
    needs: [build]

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Download artifact
      id: download
      uses: actions/download-artifact@v3.0.1
      with:
        name: "ubuntu-clang-11-valgrind"
        path: build

    - shell: bash
      run: |
        mv build/lib/*.arkm lib/
        chmod u+x build/ark build/arkscript

    - name: Update LLVM compilers
      shell: bash
      run: |
        sudo apt-get update --fix-missing
        sudo apt-get install -y clang-11 lld-11 libc++-11-dev libc++abi-11-dev clang-tools-11 valgrind

    - name: Valgrind checks for memory leaks
      shell: bash
      run: |
        valgrind --leak-check=full --show-leak-kinds=all \
          --track-origins=yes --track-fds=yes \
          --trace-children=yes \
          --verbose -s \
          --error-exitcode=1 \
          build/arkscript tests/arkscript/unittests.ark -L ./lib valgrind
