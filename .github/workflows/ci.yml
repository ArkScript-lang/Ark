name: CMake

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.name }}

    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC",
            os: windows-latest, os_short: "Windows",
            build_type: "Release", cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest, os_short: "Ubuntu",
            build_type: "Release", cc: "gcc-8", cxx: "g++-8"
          }
        - {
            name: "Ubuntu Latest Clang",
            os: ubuntu-latest, os_short: "Ubuntu",
            build_type: "Release", cc: "clang", cxx: "clang++"
          }
        - {
            name: "macOS Latest Clang",
            os: macos-latest, os_short: "macOS",
            build_type: "Release", cc: "clang", cxx: "clang++"
          }

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Update compilers
      if: ${{ matrix.config.cc }} == 'gcc' && ${{ matrix.config.os_short }} == 'Ubuntu'
      shell: bash
      run: |
        if [[ ${{ matrix.config.cc }} == 'gcc-8' && ${{ matrix.config.os_short }} == 'Ubuntu' ]]; then
          sudo apt-add-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get -yq install g++-8 gcc-8
        elif [[ ${{ matrix.config.cc }} == 'clang' && ${{ matrix.config.os_short }} == 'Ubuntu' ]]; then
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key 2>/dev/null | sudo apt-key add -
          sudo add-apt-repository 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main' -y
          sudo apt-get update -q
          sudo apt-get install -y clang-9 lld-9 libc++-9-dev libc++abi-9-dev clang-tools-9
        elif [[ ${{ matrix.config.os_short }} == 'macOS' ]]; then
          brew install gcc && brew link gcc && CXX=/usr/local/bin/g++-9
          brew install openssl
          export OPENSSL_ROOT_DIR=/usr/local/opt/openssl/
        fi

    - name: Configure CMake
      shell: bash
      run: cmake -Bbuild -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} -DARK_BUILD_EXE=On -DARK_BUILD_MODULES=On

    - name: Build
      shell: bash
      run: |
        cmake --build build --config $BUILD_TYPE --target ark
        cmake --build build --config $BUILD_TYPE --target console

    - name: Test
      shell: bash
      run: |
        if [ -f build/Release/ark.exe ]; then
            ./build/Release/ark.exe tests/unittests.ark --lib lib/ || exit 1
        else
          ./build/ark tests/unittests.ark --lib lib/ || exit 1
        fi
