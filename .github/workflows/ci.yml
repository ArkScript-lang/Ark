name: CMake

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.name }}

    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", artifact: "Windows-MSVC.tar.gz",
            os: windows-latest,
            build_type: "Release", cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            name: "Windows Latest MinGW", artifact: "Windows-MinGW.tar.gz",
            os: windows-latest,
            build_type: "Release", cc: "gcc-8", cxx: "g++-8"
          }
        - {
            name: "Ubuntu Latest GCC", artifact: "Linux.tar.gz",
            os: ubuntu-latest,
            build_type: "Release", cc: "gcc-8", cxx: "g++-8"
          }
        - {
            name: "macOS Latest Clang", artifact: "macOS.tar.gz",
            os: macos-latest,
            build_type: "Release", cc: "clang", cxx: "clang++"
          }

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Update Ubuntu GCC compilers
      if: ${{ matrix.config.cc }} == 'gcc' && runner.os == 'Ubuntu'
      shell: bash
      run: |
        sudo apt-add-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt-get -yq install g++-8 gcc-8

    - name: Update Ubuntu Clang compilers
      if: ${{ matrix.config.cc }} == 'clang' && runner.os == 'Ubuntu'
      shell: bash
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key 2>/dev/null | sudo apt-key add -
        sudo add-apt-repository 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main' -y
        sudo apt-get update -q
        sudo apt-get install -y clang-9 lld-9 libc++-9-dev libc++abi-9-dev clang-tools-9

    - name: Update MacOs compilers
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew install gcc && brew link gcc && CXX=/usr/local/bin/g++-9

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DARK_BUILD_EXE=On -DARK_BUILD_MODULES=On

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        cmake --build . --config $BUILD_TYPE --target ark
        cmake --build . --config $BUILD_TYPE --target console

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        if [ -f build/Release/ark ]; then
          mv build/Release/ark build/ark
        fi
        build/ark tests/unittest.ark --lib lib/ || exit 1
