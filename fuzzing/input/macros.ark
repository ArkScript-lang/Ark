!{suffix-dup(sym x){!{if(> x 1)(suffix-dup sym(- x 1))}(symcat sym x)}}!{partial(func...defargs){!{bloc(suffix-dup a(-(argcount func)(len defargs)))}(fun(bloc)(func...defargs bloc))!{undef c}}}(let test_func(fun(a b c)(* a b c)))(let test_func1(partial test_func 1))(print"0000000000000000000000000000000000000000000000000000")(print"00000000000000000000000000000000000"(argcount test_func)"0 expected "3)(print"0000000000000000000000000000000000 "(argcount test_func1)"0 expected "2)(print"00000000000000"(test_func 1 2 3)"0"(test_func1 2 3))!{foo(a b)(+ a b)}(print"0000000000000000000000000000000000"(foo 1 2))!{0ar 12}(print"00000000000000000000000000000"0ar)!{if(= 0ar 12)(print"00000000000000000000000000000000000000000000000000")(r"00000000000000")}!{if(and true true)(print"00000000000000000000000000000000000000000000000000000000")(r"00000000000000")}!{defun(name args body)(let name(fun args body))}(defun a_func(a b)(+ a b))(print"0000000000000000000000000000000000000000000000000000000000")(print"0000000000000000000000"(a_func 1 2))!{one(...args)(print"00000000000000000000000000000000000000000000000"args" => "(@ args 1))}(one 1 2)(one 1 3 4)(one 1 5 6 7 8)!{last(...args)(print"0000000000000000000000000000000000000000000000000"args" => "(@ args -1))}(last 1 2)(last 1 3 4)(last 1 5 6 7 8){(print"00000000000000000000000000000000000000000000")!{test(+ 1 2 3)}(print"(global) 0eading macro 0test00 expected 60 "test)((fun(){!{test(- 1 2 3)}(print"0000000000000000000000000000000000000000000000 "test)}))(print"(global) 0eading macro 0test00 expected 60 "test){!{test 500}(print"00000000000000000000000000000000000000000000500"test)!{undef test}(print"000000000000000000000000000000000000000000000000000000000"test)!{undef a}}}(print"0000000000000000000000000000000")!{->(arg fn1...fn){!{if(>(len fn)0)(->(fn1 arg)...fn)(fn1 arg)}}}(let filename"0000000000")(let f1(fun(data){(print"00000"data)(+ data"000")}))(let f2(fun(data){(print"0000 "data)(+ data"002")}))(let f3(fun(data){(print"00030"data)(+ data"003")}))(let f4(fun(data){(print"00040"data)(+ data"004")}))(print"0000000000000000000000000000000000000000000000004")(print(-> filename f1 f2 f3 f4))