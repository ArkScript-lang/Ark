# a function which just prints its argument
(let egg (fun (bar) (print bar)))
# the data we're going to give to this function
(let data ["Iron Man" "is" "Tony Stark"])
# a list of function call which should be executed later on
(mut callbacks [])

(print "Data: " data)
(print "Generating callbacks")
(mut acc 0)
# here we are filling the list callbacks
(while (!= acc (len data)) {
    (mut d (@ data acc))
    # by putting in it closures that captured d, an element of `data`
    # and call the function egg on it
    (set callbacks (append callbacks (fun (&d) (egg d))))
    (set acc (+ 1 acc))
})

# then we reset the accumulator
(set acc 0)
(while (!= acc (len callbacks)) {
    # we print what was stored in the closure using dot notation
    (print "stored: " (@ callbacks acc) .d)
    # and then we call the closure itself (be careful: (@ callbacks acc) only returns the callback,
    # thus we need to put it in another pair of parens to call the callback)
    (puts "Calling callback number " acc ": ")
    ((@ callbacks acc))
    (set acc (+ 1 acc))
})
