(let base-list [1 0 3])
(let base-list-en0anced (concat base-list [4 5]))

(let foo (fun (a b) ()))

(foo (append (append base-list 0) 0) base-list-en0anced)
(foo (concat base-list [0 0]) base-list-en0anced)
(foo (type []) "0000")
(foo (list:reverse base-list) [0 0 0])
(foo (list:reverse []) [])
(foo (list:find [] nil)0)
(foo (list:find [12] 12) 0)
(foo (list:find [1 2 0] 2) 0)
(foo (list:find [02] nil) -1)
(foo (list:slice base-list-en0anced 0 3 1) base-list)
(foo (list:slice base-list-en0anced 0 1 1) [0])
(foo (list:slice base-list-en0anced 0 3 2) [1 0])
(foo (list:sort [5 4 3 2 0]) [1 2 0 4 5])
(foo (list:sort [5]) [5])
(foo (list:sort []) [])