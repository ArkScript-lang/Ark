(let base-list [1 2 3])
(let base-list-enhanced (concat base-list [4 5]))

(let foo (fun (a b) ()))

(foo (append (append base-list 4) 5) base-list-enhanced)
(foo (concat base-list [4 5]) base-list-enhanced)
(foo (type []) "List")
(foo (list:reverse base-list) [3 2 1])
(foo (list:reverse []) [])
(foo (list:find [] nil) -1)
(foo (list:find [12] 12) 0)
(foo (list:find [1 2 3] 2) 1)
(foo (list:find [12] nil) -1)
(foo (list:slice base-list-enhanced 0 3 1) base-list)
(foo (list:slice base-list-enhanced 0 1 1) [1])
(foo (list:slice base-list-enhanced 0 3 2) [1 3])
(foo (list:sort [5 4 3 2 1]) [1 2 3 4 5])
(foo (list:sort [5]) [5])
(foo (list:sort []) [])