{
    (import "Functional/Functional.ark")
    (import "Functional/Reduce.ark")
    (import "Functional/Exceptions.ark")

    (let functional-tests (fun () {
        (mut tests 0)

        (let foo (fun (a) (+ a 10)))
        (let bar (fun (b) (* b 12)))
        (let egg (compose foo bar))
        (assert (= (egg 4) 58) "Functional test 1 failed")      (set tests (+ 1 tests))

        (let a [1 2 3 4])
        (let b [2 3 4 5])
        (let c [1 2 3])
        (assert (= (zip a c) [[1 1] [2 2] [3 3]]) "Functional test 2 failed")           (set tests (+ 1 tests))
        (assert (= (zip a b) [[1 2] [2 3] [3 4] [4 5]]) "Functional test 2°2 failed")   (set tests (+ 1 tests))
        (assert (= (zip b a) [[2 1] [3 2] [4 3] [5 4]]) "Functional test 2°3 failed")   (set tests (+ 1 tests))
        (assert (= (zip [] a) []) "Functional test 2°4 failed")                         (set tests (+ 1 tests))

        (assert (= (map foo a) [11 12 13 14]) "Functional test 3 failed")   (set tests (+ 1 tests))
        (assert (= (map foo []) []) "Functional test 3°2 failed")           (set tests (+ 1 tests))

        (let newsum (fun (a b) (+ a b)))
        (assert (= (reduce newsum [1 2 3]) 6) "Functional test 4 failed")   (set tests (+ 1 tests))

        (let invert (fun (x) {
            (if (= x 0)
                (throw "cannot divide by zero")
                (return (/ 1 x))
            )
        }))

        (try (invert 0)
            (fun (inverted) { (assert false "Functional test 5 failed") (set tests (+ 1 tests)) })
            (fun (err) { (assert (= err "cannot divide by zero") "Functional test 5°2 failed") (set tests (+ 1 tests)) })
        )

        (print "  Functional tests passed \t(" tests ")")
        tests
    }))

    (let passed-functional (functional-tests))
}
