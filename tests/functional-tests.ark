{
    (import "test-tools.ark")
    
    (import "Functional/Functional.ark")
    (import "Functional/Reduce.ark")
    (import "Functional/Exceptions.ark")

    (let functional-tests (fun () {
        (mut tests 0)
        (let start-time (time))

        (let foo (fun (a) (+ a 10)))
        (let bar (fun (b) (* b 12)))
        (let egg (compose foo bar))
        (assert_ (= (egg 4) 58) "Functional test 1 failed")

        (let a [1 2 3 4])
        (let b [2 3 4 5])
        (let c [1 2 3])
        (assert_ (= (zip a c) [[1 1] [2 2] [3 3]]) "Functional test 2 failed")
        (assert_ (= (zip a b) [[1 2] [2 3] [3 4] [4 5]]) "Functional test 2°2 failed")
        (assert_ (= (zip b a) [[2 1] [3 2] [4 3] [5 4]]) "Functional test 2°3 failed")
        (assert_ (= (zip [] a) []) "Functional test 2°4 failed")

        (assert_ (= (map foo a) [11 12 13 14]) "Functional test 3 failed")
        (assert_ (= (map foo []) []) "Functional test 3°2 failed")

        (let newsum (fun (a b) (+ a b)))
        (assert_ (= (reduce newsum [1 2 3]) 6) "Functional test 4 failed")

        (let invert (fun (x) {
            (if (= x 0)
                (throw "cannot divide by zero")
                (return (/ 1 x))
            )
        }))

        (try (invert 0)
            (fun (inverted) { (assert_ false "Functional test 5 failed") })
            (fun (err) { (assert_ (= err "cannot divide by zero") "Functional test 5°2 failed") })
        )

        (assert_ (= (unzip (zip a c)) [[1 2 3] [1 2 3]]) "Functional test 6 failed")
        (assert_ (= (unzip (zip a b)) [[1 2 3 4] [2 3 4 5]]) "Functional test 6°2 failed")
        (assert_ (= (unzip (zip b a)) [[2 3 4 5] [1 2 3 4]]) "Functional test 6°3 failed")
        (assert_ (= (unzip (zip [] a)) [[] []]) "Functional test 6°4 failed")

        (let oneThroughTen [1 2 3 4 5 6 7 8 9 10])
        (assert_ (= (filter (fun (x) (= 0 (mod x 2))) oneThroughTen) [2 4 6 8 10]) "Functional test 7 failed")
        (assert_ (= (filter (fun (x) (> x 5)) oneThroughTen) [6 7 8 9 10]) "Functional test 7°2 failed")
        (assert_ (= (filter (fun (x) (true)) []) []) "Functional test 7°3 failed")

        (let div (fun (x y) (/ x y)))
        (let divBy5 (flip div 5))

        (assert_ (= (divBy5 10) 2) "Functional test 8 failed")

        (recap "Functional tests passed" tests (- (time) start-time))

        tests
    }))

    (let passed-functional (functional-tests))
}
