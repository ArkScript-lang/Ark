(import "tests-tools.ark")

(let vm-tests (fun () {
    (mut tests 0)
    (let start-time (time))

    (let closure (fun (&tests) ()))

    (set tests (assert-eq (+ 1 2) 3 "VM operations" tests))
    (set tests (assert-eq (+ 1.5 2.5) 4.0 "VM operations" tests))
    (set tests (assert-eq (- 1 2) -1 "VM operations" tests))
    (set tests (assert-eq (- 1.5 2) -0.5 "VM operations" tests))
    (set tests (assert-eq (/ 1 2) 0.5 "VM operations" tests))
    (set tests (assert-eq (/ 10 2) 5 "VM operations" tests))
    (set tests (assert-eq (* 1 2) 2 "VM operations" tests))
    (set tests (assert-eq (* 0.5 2) 1 "VM operations" tests))
    (set tests (assert-gt 0 -4 "VM operations" tests))
    (set tests (assert-gt "hello" "a" "VM operations" tests))
    (set tests (assert-lt -4 0 "VM operations" tests))
    (set tests (assert-lt "abc" "super man" "VM operations" tests))
    (set tests (assert-le -4 0 "VM operations" tests))
    (set tests (assert-le "abc" "abc" "VM operations" tests))
    (set tests (assert-le "abc" "super man" "VM operations" tests))
    (set tests (assert-ge 0 -4 "VM operations" tests))
    (set tests (assert-ge "hello" "hello" "VM operations" tests))
    (set tests (assert-ge "hello" "abc" "VM operations" tests))
    (set tests (assert-neq "hello" "abc" "VM operations" tests))
    (set tests (assert-neq nil true "VM operations" tests))
    (set tests (assert-neq nil false "VM operations" tests))
    (set tests (assert-neq true false "VM operations" tests))
    (set tests (assert-neq [] "" "VM operations" tests))
    (set tests (assert-neq "" 1 "VM operations" tests))
    (set tests (assert-neq "" nil "VM operations" tests))
    (set tests (assert-neq "" true "VM operations" tests))
    (set tests (assert-neq "" false "VM operations" tests))
    (set tests (assert-eq (len "hello") 5 "VM operations" tests))
    (set tests (assert-eq (len "") 0 "VM operations" tests))
    (set tests (assert-eq (len [""]) 1 "VM operations" tests))
    (set tests (assert-eq (len []) 0 "VM operations" tests))
    (set tests (assert-eq (len "hello") 5 "VM operations" tests))
    (set tests (assert-val (empty? "") "VM operations" tests))
    (set tests (assert-val (empty? []) "VM operations" tests))
    (set tests (assert-eq (firstOf "hello") "h" "VM operations" tests))
    (set tests (assert-eq (firstOf []) [] "VM operations" tests))
    (set tests (assert-eq (firstOf [1]) 1 "VM operations" tests))
    (set tests (assert-eq (tailOf "") "" "VM operations" tests))
    (set tests (assert-eq (tailOf "abc") "bc" "VM operations" tests))
    (set tests (assert-eq (tailOf []) [] "VM operations" tests))
    (set tests (assert-eq (tailOf [1 2 3]) [2 3] "VM operations" tests))
    (set tests (assert-eq (headOf "") "" "VM operations" tests))
    (set tests (assert-eq (headOf "abc") "ab" "VM operations" tests))
    (set tests (assert-eq (headOf []) [] "VM operations" tests))
    (set tests (assert-eq (headOf [1 2 3]) [1 2] "VM operations" tests))
    (set tests (assert-val (nil? nil) "VM operations" tests))
    (set tests (assert-val (not (nil? "")) "VM operations" tests))
    (set tests (assert-val (not (nil? [])) "VM operations" tests))
    (set tests (assert-eq (toNumber "12") 12 "VM operations" tests))
    (set tests (assert-eq (toNumber "abc") nil "VM operations" tests))
    (set tests (assert-eq (toNumber "-12.5") -12.5 "VM operations" tests))
    (set tests (assert-eq (toString 12) "12" "VM operations" tests))
    (set tests (assert-eq (toString nil) "nil" "VM operations" tests))
    (set tests (assert-eq (toString true) "true" "VM operations" tests))
    (set tests (assert-eq (toString false) "false" "VM operations" tests))
    (set tests (assert-eq (toString [1 2]) "[1 2]" "VM operations" tests))
    (set tests (assert-eq (toString ["12"]) "[\"12\"]" "VM operations" tests))
    (set tests (assert-eq (@ "hello" 1) "e" "VM operations" tests))
    (set tests (assert-eq (@ "hello" -1) "o" "VM operations" tests))
    (set tests (assert-eq (@ "hello" -4) "e" "VM operations" tests))
    (set tests (assert-eq (@ ["h" "e" "l" "l" "o"] 1) "e" "VM operations" tests))
    (set tests (assert-eq (@ ["h" "e" "l" "l" "o"] -1) "o" "VM operations" tests))
    (set tests (assert-eq (@ ["h" "e" "l" "l" "o"] -4) "e" "VM operations" tests))
    (set tests (assert-val (and true true true) "VM operations" tests))
    (set tests (assert-val (not (and true nil true)) "VM operations" tests))
    (set tests (assert-val (or false true nil) "VM operations" tests))
    (set tests (assert-val (not (or false "" nil)) "VM operations" tests))
    (set tests (assert-eq (mod 12 5) 2 "VM operations" tests))
    (set tests (assert-eq (mod 12.5 5.5) 1.5 "VM operations" tests))
    (set tests (assert-eq (type []) "List" "VM operations" tests))
    (set tests (assert-eq (type 1) "Number" "VM operations" tests))
    (set tests (assert-eq (type "") "String" "VM operations" tests))
    (set tests (assert-eq (type vm-tests) "Function" "VM operations" tests))
    (set tests (assert-eq (type print) "CProc" "VM operations" tests))
    (set tests (assert-eq (type closure) "Closure" "VM operations" tests))
    (set tests (assert-eq (type nil) "Nil" "VM operations" tests))
    (set tests (assert-eq (type true) "Bool" "VM operations" tests))
    (set tests (assert-eq (type false) "Bool" "VM operations" tests))
    (set tests (assert-val (hasField closure "tests") "VM operations" tests))
    (set tests (assert-val (not (hasField closure "12")) "VM operations" tests))

    (recap "VM operations passed" tests (- (time) start-time))

    tests
}))

(let passed-vm (vm-tests))