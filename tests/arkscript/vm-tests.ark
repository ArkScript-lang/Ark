(import "tests-tools.ark")

(let vm-tests (fun () {
    (mut tests 0)
    (let start-time (time))

    (let closure (fun (&tests) ()))

    (set tests (assert-eq (+ 1 2) 3 "addition" tests))
    (set tests (assert-eq (+ 1.5 2.5) 4.0 "addition (double)" tests))
    (set tests (assert-eq (- 1 2) -1 "soustraction" tests))
    (set tests (assert-eq (- 1.5 2) -0.5 "soustraction (double)" tests))
    (set tests (assert-eq (/ 1 2) 0.5 "division" tests))
    (set tests (assert-eq (/ 10 2) 5 "division" tests))
    (set tests (assert-eq (* 1 2) 2 "multiplication" tests))
    (set tests (assert-eq (* 0.5 2) 1 "multiplication (double)" tests))
    (set tests (assert-gt 0 -4 "comparison" tests))
    (set tests (assert-gt "hello" "a" "comparison" tests))
    (set tests (assert-lt -4 0 "comparison" tests))
    (set tests (assert-lt "abc" "super man" "comparison" tests))
    (set tests (assert-le -4 0 "comparison" tests))
    (set tests (assert-le "abc" "abc" "comparison" tests))
    (set tests (assert-le "abc" "super man" "comparison" tests))
    (set tests (assert-ge 0 -4 "comparison" tests))
    (set tests (assert-ge "hello" "hello" "comparison" tests))
    (set tests (assert-ge "hello" "abc" "comparison" tests))
    (set tests (assert-neq "hello" "abc" "comparison" tests))
    (set tests (assert-neq nil true "comparison" tests))
    (set tests (assert-neq nil false "comparison" tests))
    (set tests (assert-neq true false "comparison" tests))
    (set tests (assert-neq [] "" "comparison" tests))
    (set tests (assert-neq "" 1 "comparison" tests))
    (set tests (assert-neq "" nil "comparison" tests))
    (set tests (assert-neq "" true "comparison" tests))
    (set tests (assert-neq "" false "comparison" tests))
    (set tests (assert-eq (len "hello") 5 "length" tests))
    (set tests (assert-eq (len "") 0 "length" tests))
    (set tests (assert-eq (len [""]) 1 "length" tests))
    (set tests (assert-eq (len []) 0 "length" tests))
    (set tests (assert-val (empty? "") "empty" tests))
    (set tests (assert-val (empty? []) "empty" tests))
    (set tests (assert-eq (tail "") "" "tail" tests))
    (set tests (assert-eq (tail "a") "" "tail" tests))
    (set tests (assert-eq (tail "abc") "bc" "tail" tests))
    (set tests (assert-eq (tail []) [] "tail" tests))
    (set tests (assert-eq (tail [1]) [] "tail" tests))
    (set tests (assert-eq (tail [1 2 3]) [2 3] "tail" tests))
    (set tests (assert-eq (head "") "" "head" tests))
    (set tests (assert-eq (head "a") "a" "head" tests))
    (set tests (assert-eq (head "abc") "a" "head" tests))
    (set tests (assert-eq (head []) nil "head" tests))
    (set tests (assert-eq (head [1]) 1 "head" tests))
    (set tests (assert-eq (head [1 2 3]) 1 "head" tests))
    (set tests (assert-val (nil? nil) "nil?" tests))
    (set tests (assert-val (not (nil? "")) "nil?" tests))
    (set tests (assert-val (not (nil? [])) "nil?" tests))
    (set tests (assert-eq (toNumber "12") 12 "toNumber" tests))
    (set tests (assert-eq (toNumber "abc") nil "toNumber" tests))
    (set tests (assert-eq (toNumber "-12.5") -12.5 "toNumber" tests))
    (set tests (assert-eq (toString 12) "12" "toString" tests))
    (set tests (assert-eq (toString nil) "nil" "toString" tests))
    (set tests (assert-eq (toString true) "true" "toString" tests))
    (set tests (assert-eq (toString false) "false" "toString" tests))
    (set tests (assert-eq (toString [1 2]) "[1 2]" "toString" tests))
    (set tests (assert-eq (toString ["12"]) "[\"12\"]" "toString" tests))
    (set tests (assert-eq (@ "hello" 1) "e" "@" tests))
    (set tests (assert-eq (@ "hello" -1) "o" "@" tests))
    (set tests (assert-eq (@ "hello" -4) "e" "@" tests))
    (set tests (assert-eq (@ ["h" "e" "l" "l" "o"] 1) "e" "@" tests))
    (set tests (assert-eq (@ ["h" "e" "l" "l" "o"] -1) "o" "@" tests))
    (set tests (assert-eq (@ ["h" "e" "l" "l" "o"] -4) "e" "@" tests))
    (set tests (assert-val (and true true true) "and" tests))
    (set tests (assert-val (not (and true nil true)) "not and" tests))
    (set tests (assert-val (or false true nil) "or" tests))
    (set tests (assert-val (not (or false "" nil)) "not or" tests))
    (set tests (assert-eq (mod 12 5) 2 "mod" tests))
    (set tests (assert-eq (mod 12.5 5.5) 1.5 "mod (doubles)" tests))
    (set tests (assert-eq (type []) "List" "type" tests))
    (set tests (assert-eq (type 1) "Number" "type" tests))
    (set tests (assert-eq (type "") "String" "type" tests))
    (set tests (assert-eq (type vm-tests) "Function" "type" tests))
    (set tests (assert-eq (type print) "CProc" "type" tests))
    (set tests (assert-eq (type closure) "Closure" "type" tests))
    (set tests (assert-eq (type nil) "Nil" "type" tests))
    (set tests (assert-eq (type true) "Bool" "type" tests))
    (set tests (assert-eq (type false) "Bool" "type" tests))
    (set tests (assert-val (hasField closure "tests") "hasField" tests))
    (set tests (assert-val (not (hasField closure "12")) "not hasField" tests))

    (recap "VM operations passed" tests (- (time) start-time))

    tests
}))

(let passed-vm (vm-tests))
