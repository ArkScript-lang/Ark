(import "tests-tools.ark")

(let macro-tests (fun () {
    (mut tests 0)
    (let start-time (time))

    !{add_two (a b) (+ a b)}
    !{nice_value 12}

    (set tests (assert-eq (add_two 1 2) 3 "macro add_two" tests))
    (set tests (assert-eq (add_two nice_value 2) 14 "macro add_two and macro value" tests))
    !{if (and true true)
        (set tests (assert-val true "macro if" tests))
        (set tests (assert-val false "macro if" tests))
    }
    !{if (= nice_value 12)
        (set tests (assert-val true "macro if" tests))
        (set tests (assert-val false "macro if" tests))
    }
    !{if (and true (= nice_value 12))
        (set tests (assert-val true "macro if" tests))
        (set tests (assert-val false "macro if" tests))
    }
    !{if (and false (= nice_value 12))
        (set tests (assert-val false "macro if" tests))
        (set tests (assert-val true "macro if" tests))
    }
    !{if (or false (= nice_value 12))
        (set tests (assert-val true "macro if" tests))
        (set tests (assert-val false "macro if" tests))
    }
    !{if (or false (!= nice_value 12))
        (set tests (assert-val false "macro if" tests))
        (set tests (assert-val true "macro if" tests))
    }
    !{if (not (= nice_value 12))
        (set tests (assert-val false "macro if" tests))
        (set tests (assert-val true "macro if" tests))
    }
    !{if (< nice_value 14)
        (set tests (assert-val true "macro comparison <" tests))
        (set tests (assert-val false "macro comparison <" tests))
    }
    !{if (> nice_value 14)
        (set tests (assert-val false "macro comparison >" tests))
        (set tests (assert-val true "macro comparison >" tests))
    }
    !{if (<= nice_value 12)
        (set tests (assert-val true "macro comparison <=" tests))
        (set tests (assert-val false "macro comparison <=" tests))
    }
    !{if (>= nice_value 12)
        (set tests (assert-val true "macro comparison >=" tests))
        (set tests (assert-val false "macro comparison >=" tests))
    }
    !{if (@ [true false] 0)
        (set tests (assert-val true "macro if @" tests))
        (set tests (assert-val false "macro if @" tests))
    }
    !{if (@ [true false] -2)
        (set tests (assert-val true "macro if @" tests))
        (set tests (assert-val false "macro if @" tests))
    }
    !{if true {
        !{in_if_1 true}
        !{in_if_2 true}
    }}
    (set tests (assert-val (and in_if_1 in_if_2) "macro if multiple definitions" tests))
    !{undef in_if_1}
    !{undef in_if_2}

    {
        !{val (+ 1 2 3)}
        (set tests (assert-eq val 6 "macro value scoping" tests))

        {
            !{val 0}
            (set tests (assert-eq val 0 "macro value scoping" tests))
            !{undef val}
            (set tests (assert-eq val 6 "macro value undefine" tests))
            !{undef a}  # shouldn't yield an error on unknown macros
        }

        (set tests (assert-eq val 6 "macro value scoping" tests))
    }

    !{bar (a ...args) (+ a (len args))}
    (set tests (assert-eq (bar 1) 1 "macro bar spreading" tests))
    (set tests (assert-eq (bar 2 3) 3 "macro bar spreading" tests))
    (set tests (assert-eq (bar 4 5 6) 6 "macro bar spreading" tests))
    (set tests (assert-eq (bar 7 8 9 10) 10 "macro bar spreading" tests))

    !{egg (...args) (bar ...args)}
    (set tests (assert-eq (egg 1) 1 "macro egg spreading" tests))
    (set tests (assert-eq (egg 0 1) 1 "macro egg spreading" tests))
    (set tests (assert-eq (egg 0 0 0 1) 3 "macro egg spreading" tests))

    !{h (...args) (head args)}
    (set tests (assert-eq (h) nil "macro h spreading" tests))
    (set tests (assert-eq (h 1) 1 "macro h spreading" tests))
    (set tests (assert-eq (h 1 2) 1 "macro h spreading" tests))

    !{g (...args) (tail args)}
    (set tests (assert-eq (g) [] "macro g spreading" tests))
    (set tests (assert-eq (g 1) [] "macro g spreading" tests))
    (set tests (assert-eq (g 1 2) [2] "macro g spreading" tests))
    (set tests (assert-eq (g 1 2 3) [2 3] "macro g spreading" tests))

    !{defun (name args body) (let name (fun args body))}
    (defun foo (a b) (+ a b))
    (set tests (assert-eq (type foo) "Function" "macro define function" tests))
    (set tests (assert-eq (foo 2 3) 5 "macro define function" tests))

    !{one (...args) (@ args 1)}
    (set tests (assert-eq (one 1 2) 2 "macro @ 1" tests))
    (set tests (assert-eq (one 1 3 4) 3 "macro @ 1" tests))
    (set tests (assert-eq (one 1 5 6 7 8) 5 "macro @ 1" tests))

    !{last (...args) (@ args -1)}
    (set tests (assert-eq (last 1 2) 2 "macro @ -1" tests))
    (set tests (assert-eq (last 1 3 4) 4 "macro @ -1" tests))
    (set tests (assert-eq (last 1 5 6 7 8) 8 "macro @ -1" tests))

    !{get_symbol (bloc) (@ bloc 1)}
    !{define (bloc) (let (get_symbol bloc) (@ bloc 2))}
    (define (let a 12))
    (set tests (assert-eq a 12 "macro get_symbol" tests))

    !{define (prefix suffix value) (let (symcat prefix suffix) value)}
    (define a 1 2)
    (set tests (assert-eq a1 2 "macro symcat" tests))
    (define a (+ 1 1) 2)
    (set tests (assert-eq a2 2 "macro symcat" tests))
    (define a (- 1 1) 2)
    (set tests (assert-eq a0 2 "macro symcat" tests))
    (define a (+ nice_value 1) 2)
    (set tests (assert-eq a13 2 "macro symcat" tests))

    !{suffix-dup (sym x) {
        !{if (> x 1)
            (suffix-dup sym (- x 1))
        }
        (symcat sym x)
    }}
    (let magic_func (fun ((suffix-dup a 3)) (- a1 a2 a3)))
    (set tests (assert-eq (magic_func 1 2 3) (- 1 2 3) "macro symdup" tests))

    !{partial (func ...defargs) {
        !{bloc (suffix-dup a (- (argcount func) (len defargs)))}
        (fun (bloc) (func ...defargs bloc))
        !{undef bloc}
    }}

    (let test_func (fun (a b c) (* a b c)))
    (let test_func1 (partial test_func 1))
    (let test_func1_2 (partial test_func1 2))
    (set tests (assert-eq (argcount test_func) 3 "macro argcount" tests))
    (set tests (assert-eq (argcount test_func1) 2 "macro argcount" tests))
    (set tests (assert-eq (argcount test_func1_2) 1 "macro argcount" tests))
    (set tests (assert-eq (test_func 1 2 3) (test_func1 2 3) "macro partial" tests))
    (set tests (assert-eq (test_func 1 2 3) (test_func1_2 3) "macro partial" tests))

    (recap "Macro tests passed" tests (- (time) start-time))

    tests
}))

(let passed-macro (macro-tests))
