# the Ackermann Peter function (see https://en.wikipedia.org/wiki/Ackermann_function)
# One of the simplest and earliest-discovered examples of a total computable function,
# that is not primitive. All primitive recursive functions are total and computable,
# but the Ackermann function illustrates that not all total computable functions
# are primitive recursive.
# Due to its definitions in terms of extremely deep recursion, it can be used as a
# benchmark of a compiler's ability to optimize recursion, which is the reason why
# we are using this function to benchmark the language.

(let ackermann (fun (m n) {
    (if (> m 0)
        # then
        (if (= 0 n)
            # then
            (ackermann (- m 1) 1)
            # else
            (ackermann (- m 1) (ackermann m (- n 1)))
        )
        # else
        (+ 1 n)
    )
}))

(let start (time))
(mut i 0)
(let limit (if (!= 0 (len sys:args))
    (if (not (nil? (toNumber (@ sys:args 0))))
        (toNumber (@ sys:args 0))
        10)
    10))

(print "limit: " limit)

(while (< i limit) {
    (ackermann 3 6)
    (set i (+ i 1))
})
(let end (- (time) start))
(print end " " (* (/ end limit) 1000) "ms per run")
