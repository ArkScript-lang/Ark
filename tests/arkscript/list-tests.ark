(import "tests-tools.ark")

(let list-tests (fun () {
    (mut tests 0)
    (let start-time (time))

    (let a [1 2 3])
    (let b [4 5 6])

    (let make (fun (a b)
        (fun (&a &b) ())))
    (let foo (make "hello" 1))

    # if this is failing, this is most likely to be a compiler problem
    (set tests (assert-eq ["hello" 1] [foo.a foo.b] "closure's list" tests))
    (set tests (assert-eq 2 (len [foo.a foo.b]) "closure's list" tests))
    (set tests (assert-eq ["hello"] (append [] foo.a) "closure's list" tests))

    (set tests (assert-eq (append a 4) [1 2 3 4] "append" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (append a a) [1 2 3 [1 2 3]] "append" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (concat a b) [1 2 3 4 5 6] "concat" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq b [4 5 6] "unmodified list" tests))
    (set tests (assert-eq (pop a 0) [2 3] "pop" tests))
    (set tests (assert-eq (pop a 1) [1 3] "pop" tests))
    (set tests (assert-eq (pop a 2) [1 2] "pop" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (list:removeAt a 0) [2 3] "remove" tests))  # DEPRECATED
    (set tests (assert-eq (list:removeAt a 2) [1 2] "remove" tests))  # DEPRECATED
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (list:reverse a) [3 2 1] "reverse" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (list:reverse []) [] "reverse" tests))
    (set tests (assert-eq (list:find a 0) -1 "find" tests))
    (set tests (assert-eq (list:find a 2) 1 "find" tests))
    (set tests (assert-eq (list:slice a 0 0 1) [] "slice" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (list:slice a 0 3 2) [1 3] "slice" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (list:sort [3 1 2]) a "sort" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (list:fill 5 nil) [nil nil nil nil nil] "fill" tests))
    (let c (list:setAt a 1 "b"))
    (set tests (assert-eq (@ c 0) (@ a 0) "set list" tests))
    (set tests (assert-eq (@ c 1) "b"     "set list" tests))
    (set tests (assert-eq (@ c 2) (@ a 2) "set list" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))

    (mut c a)
    (mut d b)
    (append! c 4)
    (set tests (assert-eq c [1 2 3 4] "append! in place" tests))
    (concat! c d)
    (set tests (assert-eq c [1 2 3 4 4 5 6] "concat! in place" tests))
    (set tests (assert-eq d [4 5 6] "concat! in place" tests))
    (pop! c -1)
    (set tests (assert-eq c [1 2 3 4 4 5] "pop! in place" tests))
    (pop! c 1)
    (set tests (assert-eq c [1 3 4 4 5] "concat! in place" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq b [4 5 6] "unmodified list" tests))

    (recap "List tests passed" tests (- (time) start-time))

    tests
}))

(let passed-list (list-tests))
