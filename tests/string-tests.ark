{
    (import "test-tools.ark")
    
    (import "String/Case.ark")
    (import "String/Reverse.ark")
    (import "String/Slice.ark")
    (import "String/Split.ark")

    (let string-tests (fun () {
        (mut tests 0)
        (let start-time (time))

        (assert_ (= "Hello world" (+ "Hello" " world")) "String test 1 failed")

        (assert_ (= "H" (@ "Hello world" 0)) "String test 2 failed")
        (assert_ (= "w" (@ "Hello world" 6)) "String test 2°2 failed")

        (assert_ (= 11 (len "Hello world")) "String test 3 failed")

        (assert_ (= true (empty? "")) "String test 4 failed")
        (assert_ (= false (empty? "Hello world")) "String test 4°2 failed")

        (assert_ (= "H" (firstOf "Hello world")) "String test 5 failed")

        (assert_ (= "Hello worl" (headOf "Hello world")) "String test 6 failed")

        (assert_ (= "ello world" (tailOf "Hello world")) "String test 7 failed")

        (assert_ (= "12" (toString 12)) "String test 8 failed")
        (assert_ (= "true" (toString true)) "String test 8°2 failed")
        (assert_ (= "false" (toString false)) "String test 8°3 failed")
        (assert_ (= "nil" (toString nil)) "String test 8°4 failed")
        (assert_ (= "[12 42]" (toString [12 42])) "String test 8°5 failed")

        (assert_ (findSubStr "hello world" "hello") "String test 9 failed")
        (assert_ (= false (findSubStr "hello world" "abc")) "String test 9°2 failed")

        (assert_ (= (removeAtStr "hello world" 1) "hllo world") "String test 10 failed")
        (assert_ (= (removeAtStr "a" 0) "") "String test 10°2 failed")

        (assert_ (= "hello" (toLowerCase "HELLO")) "String test 11 failed")
        (assert_ (= "hello foo bar baz" (toLowerCase "HeLlO FoO bar baZ")) "String test 11°2 failed")
        (assert_ (= "" (toLowerCase "")) "String test 11°3 failed")

        (assert_ (= "HELLO" (toUpperCase "hello")) "String test 12 failed")
        (assert_ (= "HELLO FOO BAR BAZ" (toUpperCase "heLlO fOo BAr baZ")) "String test 12°2 failed")
        (assert_ (= "" (toUpperCase "")) "String test 12°3 failed")

        (assert_ (= "CBA" (reverseStr "ABC")) "String test 13 failed")
        (assert_ (= "Wow, it works" (reverseStr (reverseStr "Wow, it works"))) "String test 13°2 failed")
        (assert_ (= "" (reverseStr "")) "String test 13°3 failed")
        (assert_ (= "a" (reverseStr "a")) "String test 13°4 failed")

        (assert_ (= "ABC" (sliceStr "ABCDEFG" 0 3)) "String test 14 failed")
        (assert_ (= "1 1 1" (sliceStr "1 1 1 2" 0 5)) "String test 14°2 failed")
        (assert_ (= "cdef" (sliceStr "abcdef" 2 13)) "String test 14°3 failed")

        (assert_ (= ["hello" "world"] (split "hello world" " ")) "String test 15 failed")
        (assert_ (= ["" "" ""] (split "aaa" "a")) "String test 15°2 failed")
        (assert_ (= ["hello"] (split "hello" " ")) "String test 15°3 failed")

        (recap "String tests passed" tests (- (time) start-time))
        
        tests
    }))

    (let passed-string (string-tests))
}