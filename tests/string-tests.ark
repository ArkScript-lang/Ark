{
    (import "String/Case.ark")
    (import "String/Reverse.ark")
    (import "String/Slice.ark")
    (import "String/Split.ark")

    (let string-tests (fun () {
        (mut tests 0)

        (assert (= "Hello world" (+ "Hello" " world")) "String test 1 failed")      (set tests (+ 1 tests))

        (assert (= "H" (@ "Hello world" 0)) "String test 2 failed")                 (set tests (+ 1 tests))
        (assert (= "w" (@ "Hello world" 6)) "String test 2°2 failed")               (set tests (+ 1 tests))

        (assert (= 11 (len "Hello world")) "String test 3 failed")                  (set tests (+ 1 tests))

        (assert (= true (empty? "")) "String test 4 failed")                        (set tests (+ 1 tests))
        (assert (= false (empty? "Hello world")) "String test 4°2 failed")          (set tests (+ 1 tests))

        (assert (= "H" (firstOf "Hello world")) "String test 5 failed")             (set tests (+ 1 tests))

        (assert (= "Hello worl" (headOf "Hello world")) "String test 6 failed")     (set tests (+ 1 tests))

        (assert (= "ello world" (tailOf "Hello world")) "String test 7 failed")     (set tests (+ 1 tests))

        (assert (= "12" (toString 12)) "String test 8 failed")                      (set tests (+ 1 tests))
        (assert (= "true" (toString true)) "String test 8°2 failed")                (set tests (+ 1 tests))
        (assert (= "false" (toString false)) "String test 8°3 failed")              (set tests (+ 1 tests))
        (assert (= "nil" (toString nil)) "String test 8°4 failed")                  (set tests (+ 1 tests))
        (assert (= "[12 42]" (toString [12 42])) "String test 8°5 failed")          (set tests (+ 1 tests))

        (assert (findSubStr "hello world" "hello") "String test 9 failed")          (set tests (+ 1 tests))
        (assert (= false (findSubStr "hello world" "abc")) "String test 9°2 failed")    (set tests (+ 1 tests))

        (assert (= (removeAtStr "hello world" 1) "hllo world") "String test 10 failed") (set tests (+ 1 tests))
        (assert (= (removeAtStr "a" 0) "") "String test 10°2 failed")                   (set tests (+ 1 tests))

        (assert (= "hello" (toLowerCase "HELLO")) "String test 11 failed")              (set tests (+ 1 tests))
        (assert (= "hello foo bar baz" (toLowerCase "HeLlO FoO bar baZ")) "String test 11°2 failed")    (set tests (+ 1 tests))
        (assert (= "" (toLowerCase "")) "String test 11°3 failed")                      (set tests (+ 1 tests))

        (assert (= "HELLO" (toUpperCase "hello")) "String test 12 failed")              (set tests (+ 1 tests))
        (assert (= "HELLO FOO BAR BAZ" (toUpperCase "heLlO fOo BAr baZ")) "String test 12°2 failed")    (set tests (+ 1 tests))
        (assert (= "" (toUpperCase "")) "String test 12°3 failed")                      (set tests (+ 1 tests))

        (assert (= "CBA" (reverseStr "ABC")) "String test 13 failed")                   (set tests (+ 1 tests))
        (assert (= "Wow, it works" (reverseStr (reverseStr "Wow, it works"))) "String test 13°2 failed")    (set tests (+ 1 tests))
        (assert (= "" (reverseStr "")) "String test 13°3 failed")                       (set tests (+ 1 tests))
        (assert (= "a" (reverseStr "a")) "String test 13°4 failed")                     (set tests (+ 1 tests))

        (assert (= "ABC" (sliceStr "ABCDEFG" 0 3)) "String test 14 failed")             (set tests (+ 1 tests))
        (assert (= "1 1 1" (sliceStr "1 1 1 2" 0 5)) "String test 14°2 failed")         (set tests (+ 1 tests))
        (assert (= "cdef" (sliceStr "abcdef" 2 13)) "String test 14°3 failed")          (set tests (+ 1 tests))

        (assert (= ["hello" "world"] (split "hello world" " ")) "String test 15 failed")    (set tests (+ 1 tests))
        (assert (= ["" "" ""] (split "aaa" "a")) "String test 15°2 failed")                 (set tests (+ 1 tests))
        (assert (= ["hello"] (split "hello" " ")) "String test 15°3 failed")                (set tests (+ 1 tests))

        (print "  String tests passed \t\t(" tests ")")
        tests
    }))

    (let passed-string (string-tests))
}