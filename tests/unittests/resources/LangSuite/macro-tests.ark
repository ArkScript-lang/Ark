(import std.Testing)

($ suffix-dup (sym x) {
    ($if (> x 1)
        (suffix-dup sym (- x 1)))
    ($symcat sym x)})
(let magic_func (fun ((suffix-dup a 3)) (- a1 a2 a3)))

($ partial (func ...defargs) {
    ($ bloc (suffix-dup a (- ($argcount func) (len defargs))))
    (fun (bloc) (func ...defargs bloc))
    ($undef bloc)})

(let test_func (fun (a b c) (* a b c)))
(let test_func1 (partial test_func 1))
(let test_func1_2 (partial test_func1 2))

(test:suite macro {
    ($ nice_value 12)

    (test:case "basic macros" {
        ($ void () nil)
        (test:eq (void) nil)

        ($ add_two (a b) (+ a b))

        (test:eq (add_two 1 2) 3)
        (test:eq (add_two nice_value 2) 14)

        ($ c (a b) (* a b))
        (test:eq (c 4 10) 40)

        ($ d (a b) (/ a b))
        (test:eq (d 10 2) 5) })

    (test:case "node manipulation" {
        ($ node_tail () (tail (begin 1 2 3)))
        ($ length () (len (fun () 5)))
        ($ not_empty_node () (empty? (fun () ())))
        ($ empty_node () (empty? ()))

        (test:eq (length) 3)
        (test:eq (not_empty_node) false)
        (test:eq (empty_node) true)
        # because it removes the "begin"
        (test:eq (node_tail) [1 2 3]) })

    (test:case "conditional macros" {
        (test:expect ($if (and true true) true false))
        (test:expect ($if (= nice_value 12) true false))
        (test:expect ($if (and true (= nice_value 12)) true false))
        (test:expect ($if (and false (= nice_value 12)) false true))
        (test:expect ($if (or false (= nice_value 12)) true false))
        (test:expect ($if (or false (!= nice_value 12)) false true))
        (test:expect ($if (not (= nice_value 12)) false true))
        (test:expect ($if (< nice_value 14) true false))
        (test:expect ($if (> nice_value 14) false true))
        (test:expect ($if (<= nice_value 12) true false))
        (test:expect ($if (>= nice_value 12) true false))
        (test:expect ($if (@ [true false] 0) true false))
        (test:expect ($if (@ [true false] -2) true false))
        (test:expect ($if 1 true false))
        ($if true {
            ($ in_if_1 true)
            ($ in_if_2 true)})
        ($if true ($ new_value true))

        (test:expect (and in_if_1 in_if_2) "a variable can be defined inside a conditional macro")
        (test:expect new_value "variable can be defined inside a conditional macro")
        ($undef in_if_1)
        ($undef in_if_2) })

    {
        ($ val (+ 1 2 3))
        (test:eq val 6 "val should be computed to 6")

        {
            ($ val 0)
            (test:eq val 0 "val is shadowed")
            ($undef val)
            (test:eq val 6 "shadowed version should be undefined")
            ($undef a)}  # shouldn't yield an error on unknown macros

        (test:eq val 6 "val should still resolve to 6")}

    (test:case "macro expansion" {
        ($ bar (a ...args) (+ a (len args)))
        (test:eq (bar 1) 1)
        (test:eq (bar 2 3) 3)
        (test:eq (bar 4 5 6) 6)
        (test:eq (bar 7 8 9 10) 10)

        ($ egg (...args) (bar ...args))
        (test:eq (egg 1) 1)
        (test:eq (egg 0 1) 1)
        (test:eq (egg 0 0 0 1) 3)

        ($ h (...args) (head args))
        (test:eq (h) nil)
        (test:eq (h 1) 1)
        (test:eq (h 1 2) 1)

        ($ g (...args) (tail args))
        (test:eq (g) [])
        (test:eq (g 1) [])
        (test:eq (g 1 2) [2])
        (test:eq (g 1 2 3) [2 3])

        ($ one (...args) (@ args 1))
        (test:eq (one 1 2) 2)
        (test:eq (one 1 3 4) 3)
        (test:eq (one 1 5 6 7 8) 5)

        ($ last (...args) (@ args -1))
        (test:eq (last 1 2) 2)
        (test:eq (last 1 3 4) 4)
        (test:eq (last 1 5 6 7 8) 8) })

    (test:case "generate valid arkscript code with macros" {
        ($ make-func (retval) (fun () retval))
        (let a-func (make-func 1))
        (test:eq (type a-func) "Function")
        (test:eq (a-func) 1)

        ($ defun (name args body) (let name (fun args body)))
        (defun foo (a b) (+ a b))
        (test:eq (type foo) "Function")
        (test:eq (foo 2 3) 5)

        ($ get_symbol (bloc) (@ bloc 1))
        ($ define (bloc) (let (get_symbol bloc) (@ bloc 2)))
        (define (let a 12))
        (test:eq a 12) })

    (test:case "define variable with a macro adding a suffix" {
        ($ nice_value 12)
        ($ define (prefix suffix value) (let ($symcat prefix suffix) value))

        (define a 1 2)
        (test:eq a1 2)
        (define a (+ 1 1) 2)
        (test:eq a2 2)
        (define a (- 1 1) 2)
        (test:eq a0 2)
        (define a (+ nice_value 1) 2)
        (test:eq a13 2) })

    (test:case "partial functions" {
        (test:eq (magic_func 1 2 3) (- 1 2 3))
        (test:eq ($argcount test_func) 3)
        (test:eq ($argcount test_func1) 2)
        (test:eq ($argcount test_func1_2) 1)
        (test:eq ($argcount (fun () ())) 0)
        (test:eq ($argcount (fun (a) ())) 1)
        (test:eq ($argcount (fun (a b g h u t) ())) 6)
        (test:eq (test_func 1 2 3) (test_func1 2 3))
        (test:eq (test_func 1 2 3) (test_func1_2 3)) })})
