{
    (import "test-tools.ark")

    (import "Math/Arithmetic.ark")

    (let math-tests (fun () {
        (mut tests 0)
        (let start-time (time))

        (assert_ (= 3 3.0) "Math test basic failed")

        (assert_ (= 12 (+ 5.5 6.5)) "Math test 1 failed")
        (assert_ (= 12 (+ 6 6)) "Math test 1°2 failed")

        (assert_ (= 12 (- 14.5 2.5)) "Math test 2 failed")
        (assert_ (= 12 (- 111 99)) "Math test 2°2 failed")

        (assert_ (= 12 (* 3 4)) "Math test 3 failed")
        (assert_ (= -12 (* -3 4)) "Math test 3°2 failed")

        (assert_ (= 12 (/ 144 12)) "Math test 4 failed")
        (assert_ (= 3.0 (/ 7.5 2.5)) "Math test 4°2 failed")

        (assert_ (< 12 14) "Math test 5 failed")
        (assert_ (< -12 14) "Math test 5°2 failed")

        (assert_ (> 112 14) "Math test 6 failed")
        (assert_ (> -12 -14) "Math test 6°2 failed")

        (assert_ (!= 12 14) "Math test 7 failed")
        (assert_ (!= -12 14) "Math test 7°2 failed")

        (assert_ (<= 12 12) "Math test 8 failed")
        (assert_ (<= -12 14) "Math test 8°2 failed")

        (assert_ (= 0 (mod 10 5)) "Math test 9 failed")
        (assert_ (= 0.5 (mod 7.5 7)) "Math test 9°2 failed")

        (assert_ (= 6 (+ 1 2 3)) "Math test 10 failed")
        (assert_ (= -4 (- 1 2 3)) "Math test 10°2 failed")
        (assert_ (= 24 (* 2 3 4)) "Math test 10°3 failed")
        (assert_ (= 2 (/ 32 8 2)) "Math test 10°4 failed")
        (assert_ (= 2 (mod 12 7 3)) "Math test 10°5 failed")
        (assert_ (and true true true) "Math test 10°6 failed")
        (assert_ (or false false true) "Math test 10°7 failed")

        (assert_ (= (exp 0) 1) "Math test 11 failed")
        (assert_ (= (ln 1) 0) "Math 11°2 failed")
        (assert_ (= E (exp 1)) "Math test 11°3 failed")
        (assert_ (= Tau (* 2 Pi)) "Math test 11°4 failed")
        (assert_ (isNaN NaN) "Math test 11°5 failed")
        (assert_ (isInf Inf) "Math test 11°6 failed")
        (assert_ (= false (isNaN 0)) "Math test 11°7 failed")
        (assert_ (= false (isInf 0)) "Math test 11°8 failed")

        (assert_ (= (pow 2 2) 4) "Math test 12 failed")
        (assert_ (= (sqrt 4) 2) "Math test 12°2 failed")
        (assert_ (= (abs -1) 1) "Math test 12°3 failed")
        (assert_ (= (abs 1) 1) "Math test 12°4 failed")
        (assert_ (= (min 2 3) 2) "Math test 12°5 failed")
        (assert_ (= (max 2 3) 3) "Math test 12°6 failed")

        (assert_ (= (even 2) true) "Math test 13 failed")
        (assert_ (= (even 1000) true) "Math test 13°2 failed")
        (assert_ (= (even 9) false) "Math test 13°3 failed")
        (assert_ (= (odd 9) true) "Math test 13°4 failed")
        (assert_ (= (odd -1) true) "Math test 13°5 failed")
        (assert_ (= (odd 2) false) "Math test 13°6 failed")
        (assert_ (= (odd 0) false) "Math test 13°7 failed")

        (recap "Math tests passed" tests (- (time) start-time))

        tests
    }))

    (let passed-arithmetic (math-tests))
}
