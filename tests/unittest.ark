{
    (import "Switch.ark")
    (import "Exceptions.ark")
    (import "Range.ark")
    (import "Split.ark")

    (let start_time (time))
    (mut passed 0)

    (print "Starting unit tests")

    # multiple # comments # test

    # --------------------------
    #         Arithmetic
    # --------------------------
    (let math-tests (fun () {
        (assert (= 3 3.0) "Math test basic failed")
        (set passed (+ 1 passed))

        (assert (= 12 (+ 5.5 6.5)) "Math test 1 failed")
        (assert (= 12 (+ 6 6)) "Math test 1°2 failed")
        (set passed (+ 1 passed))

        (assert (= 12 (- 14.5 2.5)) "Math test 2 failed")
        (assert (= 12 (- 111 99)) "Math test 2°2 failed")
        (set passed (+ 1 passed))

        (assert (= 12 (* 3 4)) "Math test 3 failed")
        (assert (= -12 (* -3 4)) "Math test 3°2 failed")
        (set passed (+ 1 passed))

        (assert (= 12 (/ 144 12)) "Math test 4 failed")
        (assert (= 3.0 (/ 7.5 2.5)) "Math test 4°2 failed")
        (set passed (+ 1 passed))

        (assert (< 12 14) "Math test 5 failed")
        (assert (< -12 14) "Math test 5°2 failed")
        (set passed (+ 1 passed))

        (assert (> 112 14) "Math test 6 failed")
        (assert (> -12 -14) "Math test 6°2 failed")
        (set passed (+ 1 passed))

        (assert (!= 12 14) "Math test 7 failed")
        (assert (!= -12 14) "Math test 7°2 failed")
        (set passed (+ 1 passed))

        (assert (<= 12 12) "Math test 8 failed")
        (assert (<= -12 14) "Math test 8°2 failed")
        (set passed (+ 1 passed))

        (assert (= 0 (mod 10 5)) "Math test 9 failed")
        (assert (= 0.5 (mod 7.5 7)) "Math test 9°2 failed")
        (set passed (+ 1 passed))

        (assert (= 6 (+ 1 2 3)) "Math test 10 failed")
        (assert (= -4 (- 1 2 3)) "Math test 10°2 failed")
        (assert (= 24 (* 2 3 4)) "Math test 10°3 failed")
        (assert (= 2 (/ 32 8 2)) "Math test 10°4 failed")
        (assert (= 2 (mod 12 7 3)) "Math test 10°5 failed")
        (assert (and true true true) "Math test 10°6 failed")
        (assert (or false false true) "Math test 10°7 failed")
    }))
    (math-tests)
    (print "  Math tests passed")

    # --------------------------
    #         Strings
    # --------------------------
    (let string-tests (fun () {
        (assert (= "Hello world" (+ "Hello" " world")) "String test 1 failed")
        (set passed (+ 1 passed))

        (assert (= "H" (@ "Hello world" 0)) "String test 2 failed")
        (assert (= "w" (@ "Hello world" 6)) "String test 2°2 failed")
        (set passed (+ 1 passed))

        (assert (= 11 (len "Hello world")) "String test 3 failed")
        (set passed (+ 1 passed))

        (assert (= true (empty? "")) "String test 4 failed")
        (assert (= false (empty? "Hello world")) "String test 4°2 failed")
        (set passed (+ 1 passed))

        (assert (= "H" (firstOf "Hello world")) "String test 5 failed")
        (set passed (+ 1 passed))

        (assert (= "Hello worl" (headOf "Hello world")) "String test 6 failed")
        (set passed (+ 1 passed))

        (assert (= "ello world" (tailOf "Hello world")) "String test 7 failed")
        (set passed (+ 1 passed))

        (assert (= "12" (toString 12)) "String test 8 failed")
        (assert (= "true" (toString true)) "String test 8°2 failed")
        (assert (= "false" (toString false)) "String test 8°3 failed")
        (assert (= "nil" (toString nil)) "String test 8°4 failed")
        (assert (= "( 12 42 )" (toString [12 42])) "String test 8°5 failed")
        (set passed (+ 1 passed))
    }))
    (string-tests)
    (print "  String tests passed")

    # --------------------------
    #           List
    # --------------------------
    (let list-tests (fun () {
        (let a [12 42])
        (assert (= "List" (type a)) "List test 1 failed")
        (set passed (+ 1 passed))

        (assert (= 2 (len a)) "List test 2 failed")
        (set passed (+ 1 passed))

        (assert (= false (empty? a)) "List test 3 failed")
        (assert (= true (empty? [])) "List test 3°2 failed")
        (set passed (+ 1 passed))

        (assert (= 12 (firstOf a)) "List test 4 failed")
        (assert (= nil (firstOf [])) "List test 4°2 failed")
        (set passed (+ 1 passed))

        (assert (= [42] (tailOf a)) "List test 5 failed")
        (assert (= nil (tailOf [])) "List test 5°2 failed")
        (set passed (+ 1 passed))

        (assert (= [12] (headOf a)) "List test 6 failed")
        (assert (= nil (headOf [])) "List test 6°2 failed")
        (set passed (+ 1 passed))

        (assert (= [12 42 64] (append a 64)) "List test 7 failed")
        (assert (= [12 42 [64]] (append a [64])) "List test 7°2 failed")
        (assert (= [12 42 nil] (append a nil)) "List test 7°3 failed")
        (set passed (+ 1 passed))

        (assert (= [12 42 12 42] (concat a a)) "List test 8 failed")
        (assert (= [12 42] (concat a [])) "List test 8°2 failed")
        (set passed (+ 1 passed))
    }))
    (list-tests)
    (print "  List tests passed")

    # --------------------------
    #           misc
    # --------------------------
    (let misc-tests (fun () {
        (assert (= 12 (toNumber "12")) "Misc test 1 failed")
        (assert (= 12.5 (toNumber "12.5")) "Misc test 1°2 failed")
        (set passed (+ 1 passed))

        (assert (= nil nil) "Misc test 2 failed")
        (assert (= true (= 1 1)) "Misc test 2°2 failed")
        (assert (= false (= 1 2)) "Misc test 2°3 failed")
        (set passed (+ 1 passed))

        (assert (and true true) "Misc test 3 failed")
        (assert (= false (and true false)) "Misc test 3°2 failed")
        (assert (= false (and false true)) "Misc test 3°3 failed")
        (assert (= false (and false false)) "Misc test 3°4 failed")
        (set passed (+ 1 passed))

        (assert (or true true) "Misc test 4 failed")
        (assert (or true false) "Misc test 4°2 failed")
        (assert (or false true) "Misc test 4°3 failed")
        (assert (= false (or false false)) "Misc test 4°4 failed")
        (set passed (+ 1 passed))

        (let a nil)
        (let closure (fun (&a) ()))

        (assert (= "Number" (type 1)) "Misc test 5 failed")
        (assert (= "List" (type [])) "Misc test 5°2 failed")
        (assert (= "String" (type "")) "Misc test 5°3 failed")
        (assert (= "Function" (type misc-tests)) "Misc test 5°4 failed")
        (assert (= "Bool" (type true)) "Misc test 5°5 failed")
        (assert (= "Bool" (type false)) "Misc test 5°6 failed")
        (assert (= "Nil" (type nil)) "Misc test 5°7 failed")
        (assert (= "CProc" (type list)) "Misc test 5°8 failed")
        (assert (= "Closure" (type closure)) "Misc test 5°9 failed")
        (set passed (+ 1 passed))

        (assert (= true (hasField closure "a")) "Misc test 6 failed")
        (assert (= false (hasField closure "b")) "Misc test 6°2 failed")
        (set passed (+ 1 passed))

        (assert (= false (nil? 0)) "Misc test 7 failed")
        (assert (nil? nil) "Misc test 7°2 failed")
        (assert (= false (nil? [])) "Misc test 7°3 failed")
        (assert (= false (nil? "")) "Misc test 7°4 failed")
        (set passed (+ 1 passed))

        (let start-sleep (time))
        (sleep 350)
        (let diff-sleep (- (time) start-sleep))
        (assert (and (>= diff-sleep 0.330) (<= diff-sleep 0.375)) "Misc test 8 failed")  # using a range of value since sleep can't be accurate

        (assert (= "A bear walked up 20 miles and saw an eagle." (format "{0} walked up {1} miles and saw {2}." "A bear" 20 "an eagle")) "Misc test 9 failed")
        (assert (= "Hello world" (format "Hello world")) "Misc test 9°2 failed")
    }))
    (misc-tests)
    (print "  Misc tests passed")
    
    # --------------------------
    #          switch
    # --------------------------
    (let switch-tests (fun () {
        (let foo (fun (n) (set passed (+ 1 passed))))
        (let event "foo")

        (switch event [
            ["coucou" '(assert false "Switch test 1 failed")]
            ["hello"  '(assert false "Switch test 1 failed")]
            ["world"  '(assert false "Switch test 1 failed")]
            ["earth"  '(assert false "Switch test 1 failed")]
            ["foob"   '(assert false "Switch test 1 failed")]
            ["foo"    '(foo 16)]
        ])
    }))
    (switch-tests)
    (print "  Switch tests passed")

    # --------------------------
    #          defer
    # --------------------------
    (let defer-tests (fun () {
        (let foo (fun (n) (+ 5 n)))
        (assert (= "Closure" (type (quote foo))) "Defer test 1 failed")
        (set passed (+ 1 passed))
        (assert (= "Closure" (type (quote (foo 5)))) "Defer test 2 failed")
        (set passed (+ 1 passed))

        (let df '(foo 5))
        (assert (= "Closure" (type df)) "Defer test 3 failed")
        (set passed (+ 1 passed))
        
        (assert (= 10 (df)) "Defer test 4 failed")
        (set passed (+ 1 passed))

        (let a (quote (foo 5)))
        (assert (= 10 (a)) "Defer test 5 failed")
        (set passed (+ 1 passed))
    }))
    (defer-tests)
    (print "  Defer tests passed")

    # --------------------------
    #        recursion
    # --------------------------
    (let ackermann (fun (m n) {
        (if (> m 0)
            # then
            (if (= 0 n)
                # then
                (ackermann (- m 1) 1)
                # else
                (ackermann (- m 1) (ackermann m (- n 1)))
            )
            # else
            (+ 1 n)
        )
    }))
    (assert (= 509 (ackermann 3 6)) "Ackermann 3 6 test failed")
    (set passed (+ 1 passed))

    (let fibo (fun (n)
        (if (< n 2) n
            (+ (fibo (- n 1)) (fibo (- n 2)))
        ))
    )

    (assert (= (fibo 16) 987) "Fibo 16 test failed")
    (set passed (+ 1 passed))

    (print "  Recursion tests passed")

    # --------------------------
    #         callbacks
    # --------------------------
    (let callbacks-tests (fun () {
        (let egg (fun (bar) { bar }))
        (let data ["Iron Man" "is" "Tony Stark"])
        (mut callbacks [])

        (mut acc 0)
        (while (!= acc (len data)) {
            (mut d (@ data acc))
            (set callbacks (append callbacks (fun (&d) (egg d))))
            (set acc (+ 1 acc))
        })

        (set acc 0)
        (while (!= acc (len callbacks)) {
            (assert (= (@ data acc) (@ callbacks acc).d) "Callback test 1 failed")
            (assert (= (@ data acc) ((@ callbacks acc))) "Callback test 1°2 failed")
            (set acc (+ 1 acc))
        })
        (set passed (+ 1 passed))

        (let countdown-from (fun (number)
            (fun (&number) {
                (set number (- number 1))
                number
            }))
        )
        (let countdown-from-3 (countdown-from 3))
        (assert (= 2 (countdown-from-3)) "Callback test 2 failed")
        (assert (= 1 (countdown-from-3)) "Callback test 2°2 failed")
        (assert (= 0 (countdown-from-3)) "Callback test 2°3 failed")
        (set passed (+ 1 passed))
    }))
    (callbacks-tests)
    (print "  Callback tests passed")

    # --------------------------
    #            OOP
    # --------------------------
    (let oop-test (fun () {
        (let create-human (fun (name age weight) {
            # functions can be invoked in the closure scope
            (let set-age (fun (new-age) (set age new-age)))

            # this will be our "constructor"
            (fun (&set-age &name &age &weight) ())
        }))

        (let bob (create-human "Bob" 0 144))
        (let john (create-human "John" 12 15))

        (assert (= bob.age 0) "OOP test 1 failed")
        (set passed (+ 1 passed))

        (bob.set-age 10)
        (assert (= bob.age 10) "OOP test 2 failed")
        (set passed (+ 1 passed))

        (assert (= john.age 12) "OOP test 3 failed")
        (set passed (+ 1 passed))
    }))
    (oop-test)
    (print "  OOP tests passed")

    # --------------------------
    #         Errors
    # --------------------------
    (let error-tests (fun () {
        (let invert (fun (x) {
            (if (= x 0)
                (throw "cannot divide by zero")
                (return (/ 1 x))
            )
        }))

        (try (invert 0)
            (fun (inverted) (assert false "Error test 1 failed"))
            (fun (err) (assert (= err "cannot divide by zero") "Error test 1°2 failed"))
        )
        (set passed (+ 1 passed))
    }))
    (error-tests)
    (print "  Error tests passed")

    # --------------------------
    #          Ranges
    # --------------------------
    (let range-test (fun () {
        (let r (range 5 10))
    
        (assert (= 5 (r)) "Range test 1 failed")
        (assert (= 6 (r)) "Range test 1°2 failed")
        (assert (= 7 (r)) "Range test 1°3 failed")
        (assert (= 8 (r)) "Range test 1°4 failed")
        (assert (= 9 (r)) "Range test 1°5 failed")
        (assert (= nil (r)) "Range test 1°6 failed")
        (set passed (+ 1 passed))
    }))
    (range-test)
    (print "  Range tests passed")

    # --------------------------
    #            Del
    # --------------------------
    (let del-test (fun () {
        (let a 10)
        (del a)
        (let a 10)

        (set passed (+ 1 passed))
    }))
    (del-test)
    (print "  Del tests passed")

    # --------------------------
    #           Scopes
    # --------------------------
    (let scope-tests (fun () {
        (let foo (fun () {x}))
        
        (let dummy1 (fun () {
            (let x 5)
            (foo)}))
        
        (let dummy2 (fun () {
            (let x 10)
            (foo)}))
        
        (assert (= 5 (dummy1)) "Scope test 1 failed")
        (assert (= 10 (dummy2)) "Scope test 1°2 failed")
        (set passed (+ 1 passed))
    }))
    (scope-tests)
    (print "  Scope tests passed")
    
    # --------------------------
    #           Split
    # --------------------------
    (let split-tests (fun () {
        (assert (= ["hello" "world"] (split "hello world" " ")) "Split test 1 failed")
        (set passed (+ 1 passed))
        (assert (= ["" "" ""] (split "aaa" "a")) "Split test 2 failed")
        (set passed (+ 1 passed))
        (assert (= ["hello"] (split "hello" " ")) "Split test 3 failed")
        (set passed (+ 1 passed))
    }))
    (split-tests)
    (print "  Split tests passed")

    (print passed " tests passed!")
    (print "Completed in " (toString (- (time) start_time)) " seconds")
}