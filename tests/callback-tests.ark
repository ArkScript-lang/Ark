{
    (let callbacks-tests (fun () {
        (let egg (fun (bar) { bar }))
        (let data ["Iron Man" "is" "Tony Stark"])
        (mut callbacks [])

        (mut acc 0)
        (while (!= acc (len data)) {
            (mut d (@ data acc))
            (set callbacks (append callbacks (fun (&d) (egg d))))
            (set acc (+ 1 acc))
        })

        (set acc 0)
        (while (!= acc (len callbacks)) {
            (assert (= (@ data acc) (@ callbacks acc).d) "Callback test 1 failed")
            (assert (= (@ data acc) ((@ callbacks acc))) "Callback test 1°2 failed")
            (set acc (+ 1 acc))
        })

        (let countdown-from (fun (number)
            (fun (&number) {
                (set number (- number 1))
                number
            }))
        )
        (let countdown-from-3 (countdown-from 3))
        (assert (= 2 (countdown-from-3)) "Callback test 2 failed")
        (assert (= 1 (countdown-from-3)) "Callback test 2°2 failed")
        (assert (= 0 (countdown-from-3)) "Callback test 2°3 failed")

        (print "  Callback tests passed")
    }))

    (callbacks-tests)
}