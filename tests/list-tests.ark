{
    (import "test-tools.ark")
    
    (import "List/Sum.ark")
    (import "List/ForEach.ark")
    (import "List/Product.ark")

    (let list-tests (fun () {
        (mut tests 0)
        (let start-time (time))

        (let a [12 42])
        (assert_ (= "List" (type a)) "List test 1 failed")

        (assert_ (= 2 (len a)) "List test 2 failed")

        (assert_ (= false (empty? a)) "List test 3 failed")
        (assert_ (= true (empty? [])) "List test 3°2 failed")

        (assert_ (= 12 (firstOf a)) "List test 4 failed")
        (assert_ (= nil (firstOf [])) "List test 4°2 failed")

        (assert_ (= [42] (tailOf a)) "List test 5 failed")
        (assert_ (= nil (tailOf [])) "List test 5°2 failed")

        (assert_ (= [12] (headOf a)) "List test 6 failed")
        (assert_ (= nil (headOf [])) "List test 6°2 failed")

        (assert_ (= [12 42 64] (append a 64)) "List test 7 failed")
        (assert_ (= [12 42 [64]] (append a [64])) "List test 7°2 failed")
        (assert_ (= [12 42 nil] (append a nil)) "List test 7°3 failed")

        (assert_ (= [12 42 12 42] (concat a a)) "List test 8 failed")
        (assert_ (= [12 42] (concat a [])) "List test 8°2 failed")

        (assert_ (= 6 (sum [1 2 3])) "List test 9 failed")

        (assert_ (= [3 2 1] (reverseList [1 2 3])) "List test 10 failed")
        (assert_ (= ["three" 2 1] (reverseList [1 2 "three"])) "List test 10°2 failed")
        (assert_ (= [] (reverseList [])) "List test 10°3 failed")

        (assert_ (nil? (findInList [1 2 3 "asdf"] "asd")) "List test 11 failed")
        (assert_ (findInList [2 3 4 5 6 1] 1) "List test 11°2 failed")
        (assert_ (nil? (findInList [] nil)) "List test 11°3 failed")

        (assert_ (= (removeAtList [1 2 3] 1) [1 3]) "List test 12 failed")
        (assert_ (= (removeAtList [1] 0) []) "List test 12°2 failed")

        (assert_ (= (sliceList [1 2 3 4 5] 0 2 1) [1 2]) "List test 13 failed")
        (assert_ (= (sliceList [1 2 3 4 5] 0 5 2) [1 3 5]) "List test 13°2 failed")

        (mut elem 1)
        (forEach [1 2 3 4] (fun (element) {
            (assert_ (= elem element) "List test 14 failed")
            (set elem (+ 1 elem))
        }))

        (forEach [] '(assert_ true "List test 14°2 failed"))

        (assert_ (= (product []) 1) "List test 15 failed")
        (assert_ (= (product [1 2 3]) 6) "List test 15°2 failed")

        (assert_ (= [] (sort [])) "List test 16 failed")
        (assert_ (= [1 2 3] (sort [1 2 3])) "List test 16°2 failed")
        (assert_ (= [2 3 "1"] (sort ["1" 2 3])) "List test 16°3 failed")

        (recap "List tests passed" tests (- (time) start-time))

        tests
    }))

    (let passed-list (list-tests))
}
