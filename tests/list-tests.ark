(import "tests-tools.ark")

(import "List.ark")
(import "Math.ark")  # for math:even

(let list-tests (fun () {
    (mut tests 0)
    (let start-time (time))

    (let a [1 2 3])
    (let b [4 5 6])

    (let make (fun (a b)
        (fun (&a &b) ())))
    (let foo (make "hello" 1))

    # if this is failing, this is most likely to be a compiler problem
    (set tests (assert-eq ["hello" 1] [foo.a foo.b] "closure's list" tests))
    (set tests (assert-eq 2 (len [foo.a foo.b]) "closure's list" tests))
    (set tests (assert-eq ["hello"] (append [] foo.a) "closure's list" tests))

    (set tests (assert-eq (append a 4) [1 2 3 4] "append" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (append a a) [1 2 3 [1 2 3]] "append" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (concat a b) [1 2 3 4 5 6] "concat" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq b [4 5 6] "unmodified list" tests))
    (set tests (assert-eq (list:reverse a) [3 2 1] "reverse" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (list:reverse []) [] "reverse" tests))
    (set tests (assert-eq (list:find a 0) -1 "find" tests))
    (set tests (assert-eq (list:find a 2) 1 "find" tests))
    (set tests (assert-eq (list:removeAt a 0) [2 3] "remove" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (list:removeAt a 2) [1 2] "remove" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (list:slice a 0 0 1) [] "slice" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (list:slice a 0 3 2) [1 3] "slice" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (list:sort [3 1 2]) a "sort" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (list:fill 5 nil) [nil nil nil nil nil] "fill" tests))
    (let c (list:setAt a 1 "b"))
    (set tests (assert-eq (@ c 0) (@ a 0) "set list" tests))
    (set tests (assert-eq (@ c 1) "b"     "set list" tests))
    (set tests (assert-eq (@ c 2) (@ a 2) "set list" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))

    (list:forEach a (fun (e) {
        # just assert we have something, basically it's just a while + @
        (set tests (assert-neq e nil "forEach" tests))
    }))
    (set tests (assert-eq (list:product b) (* 4 5 6) "product" tests))
    (set tests (assert-eq b [4 5 6] "unmodified list" tests))
    (set tests (assert-eq (list:product []) 1 "product" tests))
    (set tests (assert-eq (list:sum b) (+ 4 5 6) "sum" tests))
    (set tests (assert-eq b [4 5 6] "unmodified list" tests))
    (set tests (assert-eq (list:sum []) 0 "sum" tests))
    (set tests (assert-eq (list:drop a 2) [3] "drop" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (list:filter a math:even) [2] "filter" tests))
    (set tests (assert-eq (list:filter a (fun (e) (> e 100))) [] "filter" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (list:filter [] (fun (e) (> e 100))) [] "filter" tests))
    (set tests (assert-eq (list:map b (fun (e) (* e e))) [16 25 36] "map" tests))
    (set tests (assert-eq b [4 5 6] "unmodified list" tests))
    (set tests (assert-eq (list:map [] (fun (e) (* e e))) [] "map" tests))
    (set tests (assert-eq (list:reduce a (fun (x y) (- x y))) -4 "reduce" tests))
    (set tests (assert-eq (list:take a 1) [1] "take" tests))
    (set tests (assert-eq (list:take a 100) a "take" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))

    (let zipped [[1 5] [2 6] [3 7] [4 8]])
    (set tests (assert-eq (list:unzip zipped) [[1 2 3 4] [5 6 7 8]] "unzip" tests))
    (set tests (assert-eq (list:unzip []) [[] []] "unzip" tests))
    (set tests (assert-eq (list:zip a b) [[1 4] [2 5] [3 6]] "zip" tests))
    (set tests (assert-eq (list:zip [] []) [] "zip" tests))

    (recap "List tests passed" tests (- (time) start-time))

    tests
}))

(let passed-list (list-tests))