(import "tests-tools.ark")

(import "List.ark")

(let list-tests (fun () {
    (mut tests 0)
    (let start-time (time))

    (let a [1 2 3])
    (let b [4 5 6])

    (set tests (assert-eq (append a 4) [1 2 3 4] "append" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (append a a) [1 2 3 [1 2 3]] "append" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (concat a b) [1 2 3 4 5 6] "concat" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq b [4 5 6] "unmodified list" tests))
    (set tests (assert-eq (list:reverse a) [3 2 1] "reverse" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (list:reverse []) [] "reverse" tests))
    (set tests (assert-eq (list:find a 0) -1 "find" tests))
    (set tests (assert-eq (list:find a 2) 1 "find" tests))
    (set tests (assert-eq (list:removeAt a 0) [2 3] "remove" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (list:removeAt a 2) [1 2] "remove" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (list:slice a 0 0 1) [] "slice" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (list:slice a 0 3 2) [1 3] "slice" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))
    (set tests (assert-eq (list:sort [3 1 2]) a "sort" tests))
    (set tests (assert-eq a [1 2 3] "unmodified list" tests))

    (recap "List tests passed" tests (- (time) start-time))

    tests
}))

(let passed-list (list-tests))