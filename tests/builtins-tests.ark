(import "tests-tools.ark")

(let builtin-tests (fun () {
    (mut tests 0)
    (let start-time (time))

    (let base-list [1 2 3])
    (let base-list-enhanced (concat base-list [4 5]))

    (set tests (assert-eq (append (append base-list 4) 5) base-list-enhanced "Builtins operations" tests))
    (set tests (assert-eq (concat base-list [4 5]) base-list-enhanced "Builtins operations" tests))
    (set tests (assert-eq (type []) "List" "Builtins operations" tests))
    (set tests (assert-eq (len []) 0 "Builtins operations" tests))
    (set tests (assert-eq (list:reverse base-list) [3 2 1] "Builtins operations" tests))
    (set tests (assert-eq (list:reverse []) [] "Builtins operations" tests))
    (set tests (assert-eq (list:find [] nil) nil "Builtins operations" tests))
    (set tests (assert-eq (list:find [12] 12) 0 "Builtins operations" tests))
    (set tests (assert-eq (list:find [1 2 3] 2) 1 "Builtins operations" tests))
    (set tests (assert-eq (list:find [12] nil) nil "Builtins operations" tests))
    (set tests (assert-eq (list:removeAt base-list 1) [1 3] "Builtins operations" tests))
    (set tests (assert-eq (list:slice base-list-enhanced 0 3 1) base-list "Builtins operations" tests))
    (set tests (assert-eq (list:slice base-list-enhanced 0 1 1) [1] "Builtins operations" tests))
    (set tests (assert-eq (list:slice base-list-enhanced 0 3 2) [1 3] "Builtins operations" tests))
    (set tests (assert-eq (list:sort [5 4 3 2 1]) [1 2 3 4 5] "Builtins operations" tests))
    (set tests (assert-eq (list:sort [5]) [5] "Builtins operations" tests))
    (set tests (assert-eq (list:sort []) [] "Builtins operations" tests))

    (let lst (list:fill 12 nil))
    (set tests (assert-eq (len lst) 12 "Builtins operations" tests))
    (mut i 0)
    (while (< i 12) {
        (set tests (assert-eq (@ lst i) nil "Builtins operations" tests))
        (set i (+ 1 i))
    })
    (del i)

    (set tests (assert-eq (@ (list:setAt lst 5 "a") 5) "a" "Builtins operations" tests))
    (del lst)

    (set tests (assert-val (not (io:fileExists? "test.txt")) "Builtins operations" tests))
    (io:writeFile "test.txt" "hello, world!")
    (set tests (assert-val (io:fileExists? "test.txt") "Builtins operations" tests))

    (recap "Builtins operations passed" tests (- (time) start-time))

    tests
}))

(let passed-builtins (builtin-tests))