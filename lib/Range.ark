{
    (let range (fun (_a _b) {
        (let astList (fun () {
            # _a and _b are going to be captured by the caller
            (mut _output [])
            (mut a_ _a)
            (while (< a_ _b) {
                (set _output (append _output a_))
                (set a_ (+ 1 a_))
            })
            _output
        }))

        (fun (&_a &_b &asList) {
            (if (< _a _b) {
                    (mut c _a)
                    (set _a (+ _a 1))
                    c
                }
                nil
            )
        })
    }))

    (let forEachR (fun (r _f) {
        (mut val (r))
        (while (= false (nil? val)) {
            (_f val)
            (set val (r))
        })
    }))
}