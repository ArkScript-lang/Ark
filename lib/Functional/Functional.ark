{

    (import "Math/Arithmetic.ark")

    (let compose (fun (f g)
        (fun (y &f &g) (f (g y)))))
    
    (let zip (fun (a b) {
        (let m (min (len a) (len b) ))
        (mut c [])
        (mut idx 0)
        (while (< idx m) {
            (set c (append c [(@ a idx) (@ b idx)]))
            (set idx (+ 1 idx))})
        c
    }))

    (let map (fun (f L) {
        (mut idx 0)
        (mut output [])
        (while (< idx (len L)) {
            (set output (append output (f (@ L idx))))
            (set idx (+ 1 idx))
        })
        output
    }))
}
