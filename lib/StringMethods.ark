{
    #made by Natendrtfm (on Github) with <3
    (let reverseStr (fun (inputed){
        (mut i (- (len inputed) 1))
        (mut returnedString "")
        (while (> i -1){
            (set returnedString (+ returnedString (@ inputed i)))
            (set i (- i 1))
        })
        returnedString
    }))

    (let sliceStr (fun (inputed startingIndex length) {
        (assert (> (len inputed) length) "slice length must be inferior than argument length")
        (assert (> (len inputed) 1) "argument length must be superior to 1")
        (assert (> length 1) "slice length must be superior to 1")
        (mut returnedString "")
        (mut i startingIndex)
        (while (< i length){
            (set returnedString (+ returnedString (@ inputed i)))
            (set i (+ i 1))
        })
        returnedString
    }))
  (let split (fun (string separator) {
        (assert (!= "" separator) "Separator of split can not be empty")
        (assert (= 1 (len separator)) "Separator length must be equal to 1")
        (mut i 0)
        (mut word "")
        (mut letter "")
        (mut output [])

        (while (< i (len string)) {
            (set letter (@ string i))
            (if (= letter separator) {
                (set output (append output word))
                (set word "")
                }
                (set word (+ word letter)))
            (set i (+ i 1))
        })
        (if (empty? word)
            output
            (append output word))
    }))
}






